{"version":3,"sources":["logic/Utils.ts","pages/SpotifyAuthorization/index.tsx","components/SpotifyLoginStatusButton.tsx","components/Navigation.tsx","components/TokenRefreshWarning.tsx","components/StoredDataDialog.tsx","pages/Home/index.tsx","pages/About/index.tsx","logic/PointSorting.ts","logic/Spotify.ts","models/Spotify.ts","hooks/WindowSize.ts","pages/Sort/PlaylistSelection.tsx","pages/Sort/PlaylistDetails.tsx","pages/Sort/PlotTracks.tsx","pages/Sort/TrackTable.tsx","pages/Sort/TrackSortControl.tsx","pages/Sort/Export.tsx","pages/Sort/index.tsx","pages/NotFound/index.tsx","hooks/NavigatorOnline.ts","App.tsx","serviceWorker.ts","index.tsx","img/banner.png","img/spotify-logo-round.png","img/sort-comparison.png"],"names":["randomString","length","result","characters","charactersLength","i","charAt","Math","floor","random","chunkList","list","chunk_amount","chunks","concat","Object","toConsumableArray","slice","arrayToObject","array","keyField","reduce","obj","item","SpotifyAuthorization","props","data","onTokenChange","hash","window","location","message","react_default","a","createElement","Fragment","random_state","localStorage","setItem","url_parameters","client_id","settings","spotify_client_id","response_type","redirect_uri","href","state","scope","spotify_premission_scope","show_dialog","url_parameters_encoded","keys","map","key","encodeURIComponent","join","Spinner_default","animation","className","params","URLSearchParams","substr","access_token","get","expires_in","stored_random_state","getItem","removeItem","value","expiryDate","Date","setSeconds","getSeconds","expiry","onTokenRecieved","parseInt","local_redirect","navigate","redirectOut","Container_default","SpotifyLoginStatusButton","user","onLoggedInClick","path","usePath","Button_default","variant","onClick","undefined","src","images","url","SpotifyLogoRound","alt","display_name","style","height","width","borderRadius","navbarLinks","/","/sort","/about","Navigation","onAuthButtonLoggedInClick","currentPath","goTo","Navbar_default","collapseOnSelect","expand","bg","sticky","Brand","banner","cursor","Toggle","aria-controls","Collapse","id","Nav_default","Link","active","components_SpotifyLoginStatusButton","TokenRefreshWarning","token","onLogOut","_useState","useState","_useState2","slicedToArray","open","setOpen","useEffect","timers","milliseconds_left","getTime","push","setTimeout","forEach","t","clearTimeout","cancelClick","expired","Modal_default","show","onHide","Header","closeButton","Title","Body","toLocaleTimeString","Footer","StoredDataDialog","playlists","tracks","onClose","tokenStub","publicPlaylistCount","values","filter","p","public","privatePlaylistCount","tracksStored","marginBottom","title","uri","Home","useTitle","BannerImage","maxWidth","textAlign","SortComparisonImage","margin","About","Row_default","Col_default","availableSortingMethods","Distance From Origin","points","objectSpread","distance","distanceToPoint","x","y","sort","b","Nearest Neighbour","nearest_point_to_origin","accumulator","currentValue","acc_dist","curr_dist","sorted_points","points_left","current_point","reduce_to_closest_point","_loop","closest_point","X Axis","Y Axis","No Sorting","xOrigin","yOrigin","sqrt","playlistRequestLimit","playlistTrackRequestLimit","trackFeaturesRequestLimit","maxRequestsSentAtOnce","offsetCalculation","limit","total","request_blocks","accounted_for","offset","createPlaylist","name","isPublic","track_uris","Promise","resolve","reject","spotifyApi","SpotifyWebApi","setAccessToken","description","then","_ref4","asyncToGenerator","regenerator_default","mark","_callee4","playlist","wrap","_context4","prev","next","addTracksToPlaylist","catch","err","track_ids","stop","_x5","apply","this","arguments","availableTrackAudioFeatures","Acousticness","min","max","show_in_sort","Danceability","Duration","Energy","Instrumentalness","Key","Liveness","Loudness","Mode","Speechiness","Tempo","Time Signature","Valence","getSize","innerHeight","innerWidth","outerHeight","outerWidth","PlaylistSelection","selectedPlaylistIds","multipleSelectionsAllowed","onPlaylistSelectionChange","singlePlaylistSelection","setSinglePlaylistSelection","_useState3","_useState4","search","setSearch","windowSize","setWindowSize","handleResize","addEventListener","removeEventListener","useWindowSize","singlePlaylistSelectionChange","sortedPlaylists","indexOf","InputGroup_default","Prepend","Text","FormControl_default","placeholder","onChange","event","currentTarget","DropdownButton_default","as","InputGroup","Append","alignRight","Dropdown_default","Item","maxHeight","overflowX","Table_default","striped","hover","playlist_id","pid","background","display","gridTemplateColumns","padding","fontSize","Badge_default","owner","PlaylistDetails","tracksLoading","external_urls","spotify","PlotTracks","x_audio_feature_key","y_audio_feature_key","x_audio_feature_name","y_audio_feature_name","x_audio_feature_min","x_audio_feature_max","y_audio_feature_min","y_audio_feature_max","track","artist","artists","duration_ms","audio_features","sp","points_x_min","points_y_min","points_x_max","points_y_max","colour_x_min","colour_x_max","colour_y_min","colour_y_max","scale_x_min","scale_x_max","scale_y_min","scale_y_max","react_plotly_default","text","hoverinfo","mode","marker","size","color","start_hex_colour","end_hex_colour","percentage","hex","tmp","toString","r","ceil","substring","g","getPointAlongColourGradient","start","end","point","atob","len","dot","getDistancePercentageAlongLineTheOfClosestPointOnLineToAnArbitaryPoint","line","layout","hovermode","l","plot_bgcolor","paper_bgcolor","xaxis","range","yaxis","useResizeHandler","border","overflow","Alert_default","header_cell_style","position","top","borderTop","TrackTable","x_audio_feature","y_audio_feature","randomEventKey","expanded","setExpanded","Accordion_default","defaultActiveKey","Card_default","Card","eventKey","overflowY","bordered","index","after","before","TrackSortControl","selected_x_axis","available_audio_features","audio_feature","onXAxisSelect","selected_y_axis","onYAxisSelect","selected_sorting_method","available_track_sorting_methods","sorting_method","onSortMethodSelect","Export","onExport","setName","makePublic","setMakePublic","_useState5","_useState6","nameInvalid","setNameInvalid","onNameChange","e","onMakePublicSelect","onCreate","success","cogoToast","heading","hideAfter","hide","error","aria-label","aria-describedby","isInvalid","justifyContent","Sort","playlistsLoading","refreshPlaylist","refreshUsersPlaylists","setSelectedPlaylistIds","selectedAxis","setSelectedAxis","sortingMethod","setSortingMethod","_useState7","_useState8","sortedTrackIds","setSortedTrackIds","_useState9","_useState10","firstPlaylistSelection","setFirstPlaylistSelection","playlistDetailsWrapperNode","useRef","selected_playlist_track_ids","flat","selected_playlist_tracks","aIndex","bIndex","tracks_with_playlist_indexes","tracks_with_sorted_indexes","find","console","sortedTrackIdsThatExist","sorted_tracks","sorted_tracks_with_indexes","it","header","Sort_PlaylistSelection","playlist_ids","scrollOnFirstSelection","current","scroll","getBoundingClientRect","scrollY","behavior","ref","Sort_PlaylistDetails","has","Sort_PlotTracks","Sort_TrackSortControl","audio_feature_name","selection","Sort_TrackTable","Sort_Export","_ref","_callee","_context","st","sent","_x","_x2","NotFound","useNavigatorOnline","navigator","onLine","isOnline","setIsOnline","handleOnlineStatusChange","emptySpotifyData","audioFeatures","App","setToken","spotifyData","setSpotifyData","storedDataDialogOpen","setStoredDataDialogOpen","Set","setPlaylistsLoading","newToken","hard","rejected","getUserPlaylists","request_blocks_chunked","promises","j","items","splice","all","new_playlists","abrupt","getAllSpotifyUsersPlaylists","prevState","Array","from","getPlaylistTracks","_ref2","_callee2","_context2","new_tracks","getAllTracksInPlaylist","tracks_with_data","warn","defineProperty","finally","updatedPlaylistsLoading","delete","stored_data","stored_data_parsed","JSON","parse","version","data_to_store","stringify","getMe","track_ids_with_no_audio_features","_ref3","_callee3","features","track_groups","track_groups_chunked","_context3","getAudioFeaturesForTracks","new_features","_x3","_x4","audio_features_by_track_id","af","tracks_with_new_audio_features","tid","null_audio_feature_tracks","routes","pages_Home","/spotify-authorization","pages_SpotifyAuthorization","/spotify-authorization/","pages_Sort","pages_About","routeResult","useRoutes","useRedirect","components_TokenRefreshWarning","components_StoredDataDialog","components_Navigation","pages_NotFound","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__"],"mappings":"mVAQO,SAASA,EAAaC,GAIzB,IAHA,IAAIC,EAAS,GACTC,EAAa,iEACbC,EAAmBD,EAAWF,OACzBI,EAAI,EAAGA,EAAIJ,EAAQI,IACxBH,GAAUC,EAAWG,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,IAE3D,OAAOF,EAIJ,SAASQ,EAAaC,EAAWC,GAEpC,IADA,IAAIC,EAAgB,GACXR,EAAI,EAAGA,EAAIM,EAAKV,OAAQI,GAAKO,EAClCC,EAAM,GAAAC,OAAAC,OAAAC,EAAA,EAAAD,CAAOF,GAAP,CAAeF,EAAKM,MAAMZ,EAAGA,EAAEO,KAEzC,OAAOC,EAIJ,SAASK,EAAiBC,EAAYC,GACzC,OAAOD,EAAME,OAAO,SAACC,EAAUC,GAE3B,OADAD,EAAIC,EAAKH,IAAaG,EACfD,GACR,ICtBP,IAkFeE,EA3E+C,SAACC,GAAkB,IDhBtDC,ECiBfC,EAAkBF,EAAlBE,cACAC,EAASC,OAAOC,SAAhBF,KAkBJG,EAAUC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,MAEd,GAAa,KAATP,EAAa,CAEb,IAAMQ,EAAepC,EAAa,IAClCqC,aAAaC,QAhCQ,4BAgCsBF,GAE3C,IAAMG,EAAiB,CACnBC,UAAaC,EAASC,kBACtBC,cAAiB,QACjBC,aAAgBf,OAAOC,SAASe,KAChCC,MAASV,EACTW,MAASN,EAASO,yBAClBC,aAAe,GAEbC,GDnDaxB,ECmDuBa,EDlDvCxB,OAAOoC,KAAKzB,GAAM0B,IAAI,SAAUC,GACnC,MAAO,CAACA,EAAK3B,EAAK2B,IAAMD,IAAIE,oBAAoBC,KAAK,OACtDA,KAAK,MCiDJ1B,OAAOC,SAASe,KAAO,0CAA4CK,EACnEnB,EAAUC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACNH,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,CAASwB,UAAU,WACnBzB,EAAAC,EAAAC,cAAA,KAAGwB,UAAU,QAAb,4DAGD,CACH,IAAMC,EAAS,IAAIC,gBAAgBhC,EAAKiC,OAAO,IACzCC,EAAeH,EAAOI,IAAI,gBAC1BC,EAAaL,EAAOI,IAAI,cACxBjB,EAAQa,EAAOI,IAAI,SAEzB,GAAqB,OAAjBD,GAAwC,OAAfE,GAAiC,OAAVlB,EAAgB,CAChE,IAAMmB,EAAsB5B,aAAa6B,QAxDxB,6BA0DW,OAAxBD,GAAgCA,IAAwBnB,GACxDT,aAAa8B,WA3DA,6BAqBD,SAACC,EAAeJ,GACpC,IAAIK,EAAa,IAAIC,KACrBD,EAAWE,WAAWF,EAAWG,aAAeR,GAChDrC,EAAc,CAAEyC,MAAOA,EAAOK,OAAQJ,IAoC9BK,CAAgBZ,EAAca,SAASX,IAjD/B,WAChB,IAAIY,EAAgCvC,aAAa6B,QAXlB,uBAYR,OAAnBU,EACAC,mBAAS,MAETxC,aAAa8B,WAfc,uBAgB3BU,mBAASD,IA4CLE,GACA/C,EAAUC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACNH,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,CAASwB,UAAU,WACnBzB,EAAAC,EAAAC,cAAA,KAAGwB,UAAU,QAAb,oBAIJ3B,EAAUC,EAAAC,EAAAC,cAAA,KAAGwB,UAAU,QAAb,gDAId3B,EAAUC,EAAAC,EAAAC,cAAA,KAAGwB,UAAU,QAAb,4BAIlB,OAAO1B,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,CAAWyB,UAAU,eACxB1B,EAAAC,EAAAC,cAAA,mCACCH,qBCtCMiD,EAvCmD,SAACvD,GAAkB,IACzEwD,EAA0BxD,EAA1BwD,KAAMC,EAAoBzD,EAApByD,gBAERC,EAAOC,oBAab,OAAOpD,EAAAC,EAAAC,cAACmD,EAAApD,EAAD,CAAQqD,QAAQ,oBAAoBC,QAXT,gBACjBC,IAATP,GACA5C,aAAaC,QDPc,sBCOmB6C,GAC9CN,mBAAS,2BAELK,GACAA,MAMRlD,EAAAC,EAAAC,cAAA,OACIuD,SACaD,IAATP,QAAsCO,IAAhBP,EAAKS,QAAwBT,EAAKS,OAAOzF,OAAS,EAClEgF,EAAKS,OAAO,GAAGC,IACfC,IAEVC,SACaL,IAATP,QAAsCO,IAAhBP,EAAKS,QAAwBT,EAAKS,OAAOzF,OAAS,EAClEgF,EAAKa,aAAe,QACpB,qBAEVC,MAAO,CAAEC,OAAQ,GAAIC,MAAO,GAAIC,aAAc,OAC9CxC,UAAU,cAGD8B,IAATP,EACMA,EAAKa,aACL,yBChCZK,EAAuC,CAC3CC,IAAM,OACNC,QAAU,OACVC,SAAW,SAqCEC,EAlCqC,SAAC9E,GAAkB,IAC7DwD,EAASxD,EAATwD,KACAuB,EAA8B/E,EAA9B+E,0BAEFC,EAAcrB,oBAEdsB,EAAO,SAAC5E,GAAD,OAAsB,kBAAM+C,mBAAS/C,KAElD,OAAOE,EAAAC,EAAAC,cAACyE,EAAA1E,EAAD,CAAQ2E,kBAAgB,EAACC,OAAO,KAAKC,GAAG,QAAQxB,QAAQ,QAAQyB,OAAO,OAC5E/E,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,KACED,EAAAC,EAAAC,cAACyE,EAAA1E,EAAO+E,MAAR,CAAczB,QAASmB,EAAK,MAC1B1E,EAAAC,EAAAC,cAAA,OACEuD,IAAKwB,IACLjB,OAAO,KACPtC,UAAU,2BACVmC,IAAI,yBACJE,MAAO,CAAEmB,OAAQ,cAGrBlF,EAAAC,EAAAC,cAACyE,EAAA1E,EAAOkF,OAAR,CAAeC,gBAAc,0BAC7BpF,EAAAC,EAAAC,cAACyE,EAAA1E,EAAOoF,SAAR,CAAiBC,GAAG,yBAClBtF,EAAAC,EAAAC,cAACqF,EAAAtF,EAAD,CAAKyB,UAAU,WACZ3C,OAAOoC,KAAKgD,GAAa/C,IAAI,SAAA+B,GAAI,OAChCnD,EAAAC,EAAAC,cAACqF,EAAAtF,EAAIuF,KAAL,CAAUnE,IAAK8B,EAAMtC,KAAK,IAAI0C,QAASmB,EAAKvB,GAAOsC,OAAQhB,IAAgBtB,GAAOgB,EAAYhB,OAGlGnD,EAAAC,EAAAC,cAACqF,EAAAtF,EAAD,KACED,EAAAC,EAAAC,cAACwF,EAAD,CAA0BzC,KAAMA,EAAMC,gBAAiBsB,0BCuClDmB,EAxE8C,SAAClG,GAAkB,IACpEmG,EAAUnG,EAAVmG,MACAC,EAAapG,EAAboG,SAFoEC,EAIpDC,oBAAS,GAJ2CC,EAAAjH,OAAAkH,EAAA,EAAAlH,CAAA+G,EAAA,GAIrEI,EAJqEF,EAAA,GAI/DG,EAJ+DH,EAAA,GAM5EI,oBAAU,WACN,IAAMC,EAA2B,GACjC,QAAc7C,IAAVoC,EAAqB,CACrB,IAAMU,EAAoBV,EAAMnD,OAAO8D,WAAY,IAAIjE,MAAOiE,UAX9C,IAYUD,GACtBD,EAAOG,KAAKC,WAAW,WACnBN,GAAQ,IACTG,EAfS,MAgBZD,EAAOG,KAAKC,WAAW,WACnBN,GAAQ,IACTG,KACIA,EAAoB,GAC3BD,EAAOG,KAAKC,WAAW,WACnBN,GAAQ,IACTG,IACHH,GAAQ,IAERA,GAAQ,GAIhB,OAAO,kBAAME,EAAOK,QAAQ,SAAAC,GAAC,OAAIC,aAAaD,OAC/C,CAACf,IAEJ,IAIMiB,EAAc,kBAAMV,GAAQ,IAElC,QAAc3C,IAAVoC,GAAuBM,EAAM,CAC7B,IAAMY,EAAmBlB,EAAMnD,OAAO8D,WAAY,IAAIjE,MAAOiE,WAAa,EAE1E,OAAOvG,EAAAC,EAAAC,cAAC6G,EAAA9G,EAAD,CAAO+G,KAAMd,EAAMe,OAAQJ,GAC9B7G,EAAAC,EAAAC,cAAC6G,EAAA9G,EAAMiH,OAAP,CAAcC,aAAW,GACrBnH,EAAAC,EAAAC,cAAC6G,EAAA9G,EAAMmH,MAAP,KACKN,EACK,wBACA,kCAIV9G,EAAAC,EAAAC,cAAC6G,EAAA9G,EAAMoH,KAAP,KACKP,EACK9G,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,gIAEEH,EAAAC,EAAAC,cAAA,WAFF,8HAKAF,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,gIAC2HyF,EAAMnD,OAAO6E,qBADxI,IAEEtH,EAAAC,EAAAC,cAAA,WAFF,gGAOdF,EAAAC,EAAAC,cAAC6G,EAAA9G,EAAMsH,OAAP,KACIvH,EAAAC,EAAAC,cAACmD,EAAApD,EAAD,CAAQqD,QAAQ,YAAYC,QAASsD,GAArC,SACA7G,EAAAC,EAAAC,cAACmD,EAAApD,EAAD,CAAQqD,QAAQ,UAAUC,QAlCjB,WACjBsC,IACAhD,mBAAS,4BAgCD,mBAIR,OAAO7C,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,OCtCAqH,EA7B2C,SAAC/H,GAAkB,IACjEmG,EAAmCnG,EAAnCmG,MAAO3C,EAA4BxD,EAA5BwD,KAAMwE,EAAsBhI,EAAtBgI,UAAWC,EAAWjI,EAAXiI,OACxBC,EAAsBlI,EAAtBkI,QAAS9B,EAAapG,EAAboG,SAEX+B,EAAYhC,EAAMxD,MAAMP,OAAO,EAAG,IAAM,QAAU+D,EAAMxD,MAAMP,OAAO+D,EAAMxD,MAAMnE,OAAS,GAAI2H,EAAMxD,MAAMnE,QAC1G4J,EAAsB9I,OAAO+I,OAAOL,GAAWM,OAAO,SAAAC,GAAC,OAAIA,EAAEC,SAAQhK,OACrEiK,EAAuBnJ,OAAO+I,OAAOL,GAAWM,OAAO,SAAAC,GAAC,OAAKA,EAAEC,SAAQhK,OACvEkK,EAAepJ,OAAO+I,OAAOJ,GAAQzJ,OAE3C,OAAO+B,EAAAC,EAAAC,cAAC6G,EAAA9G,EAAD,CAAO+G,MAAM,EAAMC,OAAQU,GAC9B3H,EAAAC,EAAAC,cAAC6G,EAAA9G,EAAMiH,OAAP,CAAcC,aAAW,GACrBnH,EAAAC,EAAAC,cAAC6G,EAAA9G,EAAMmH,MAAP,KAAcnE,EAAKa,eAEnB9D,EAAAC,EAAAC,cAAC6G,EAAA9G,EAAMoH,KAAP,8BAEIrH,EAAAC,EAAAC,cAAA,MAAI6D,MAAO,CAAEqE,aAAc,IACvBpI,EAAAC,EAAAC,cAAA,MAAImI,MAAOT,GAAX,qBAAwC5H,EAAAC,EAAAC,cAAA,YAAO0F,EAAMnD,OAAO6E,uBAC5DtH,EAAAC,EAAAC,cAAA,MAAImI,MAAOpF,EAAKqF,KAAhB,oBAAsCtI,EAAAC,EAAAC,cAAA,YAAO+C,EAAKa,eAClD9D,EAAAC,EAAAC,cAAA,+BAAsBF,EAAAC,EAAAC,cAAA,YAAO2H,EAAP,eAAwCK,EAAxC,aACtBlI,EAAAC,EAAAC,cAAA,kDAAyCF,EAAAC,EAAAC,cAAA,YAAOiI,MAG5DnI,EAAAC,EAAAC,cAAC6G,EAAA9G,EAAMsH,OAAP,KACIvH,EAAAC,EAAAC,cAACmD,EAAApD,EAAD,CAAQqD,QAAQ,oBAAoBC,QAASoE,GAA7C,SACA3H,EAAAC,EAAAC,cAACmD,EAAApD,EAAD,CAAQqD,QAAQ,oBAAoBC,QAASsC,GAA7C,8BCDG0C,EA5B+B,SAAC9I,GAC3C+I,mBAAS,cAIT,OAAOxI,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACHH,EAAAC,EAAAC,cAAA,WAASwB,UAAU,yCACf1B,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,KACID,EAAAC,EAAAC,cAAA,MAAIwB,UAAU,WAAd,cACA1B,EAAAC,EAAAC,cAAA,OAAKuD,IAAKgF,IAAa/G,UAAU,OAAOqC,MAAO,CAAEE,MAAO,IAAKyE,SAAU,QAAU7E,IAAI,2BACrF7D,EAAAC,EAAAC,cAAA,KAAGwB,UAAU,8BAAb,iHAIR1B,EAAAC,EAAAC,cAAA,eACIF,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,CAAW8D,MAAO,CAAE4E,UAAW,SAAUP,aAAc,KACnDpI,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,OAAKuD,IAAKmF,IAAqB/E,IAAI,6BAA6BE,MAAO,CAAE2E,SAAU,OAAQzE,MAAO,OAClGjE,EAAAC,EAAAC,cAAA,OAAK6D,MAAO,CAAE2E,SAAU,IAAKG,OAAQ,cACjC7I,EAAAC,EAAAC,cAAA,KAAGwB,UAAU,QAAb,oGACA1B,EAAAC,EAAAC,cAAA,KAAGwB,UAAU,QAAb,mKAEJ1B,EAAAC,EAAAC,cAACmD,EAAApD,EAAD,CAAQqD,QAAQ,eAAeC,QAnB1B,kBAAMV,mBAAS,WAmBpB,iECuBDiG,EA9CgC,SAACrJ,GAG5C,OAFA+I,mBAAS,sBAEFxI,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,KACHD,EAAAC,EAAAC,cAAC6I,EAAA9I,EAAD,CAAKyB,UAAU,6BACX1B,EAAAC,EAAAC,cAAC8I,EAAA/I,EAAD,CAAKyB,UAAU,sBACX1B,EAAAC,EAAAC,cAAA,MAAIwB,UAAU,eAAd,SACA1B,EAAAC,EAAAC,cAAA,uMACAF,EAAAC,EAAAC,cAAA,oFAA2EF,EAAAC,EAAAC,cAAA,uBAA3E,QAAoGF,EAAAC,EAAAC,cAAA,sBAApG,cAAkIF,EAAAC,EAAAC,cAAA,KAAGW,KAAK,4FAAR,wCAAlI,+QACAb,EAAAC,EAAAC,cAAA,mQACAF,EAAAC,EAAAC,cAAA,8NACAF,EAAAC,EAAAC,cAAA,6HAEAF,EAAAC,EAAAC,cAAA,MAAIwB,UAAU,eAAd,eACA1B,EAAAC,EAAAC,cAAA,mLACAF,EAAAC,EAAAC,cAAA,iKAEAF,EAAAC,EAAAC,cAAA,MAAIwB,UAAU,eAAd,OACA1B,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,0CACAF,EAAAC,EAAAC,cAAA,qKACAF,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,6GACAF,EAAAC,EAAAC,cAAA,wEACAF,EAAAC,EAAAC,cAAA,yCAAgCF,EAAAC,EAAAC,cAAA,KAAGW,KAAK,4FAAR,WAAhC,KACAb,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,4BAAJ,4HACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,4BAAJ,qKACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,wBAAJ,gDACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,sBAAJ,oPACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,gCAAJ,iRACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,mBAAJ,wEACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,wBAAJ,6NACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,wBAAJ,iNACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,oBAAJ,qKACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,2BAAJ,oTACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,qBAAJ,uEACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,8BAAJ,mKACAF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,uBAAJ,oOCzBP+I,GAAqD,CAC9DC,uBAcG,SAAwBC,GAI3B,OAH4BA,EAAO/H,IAAI,SAAA4G,GACnC,OAAOjJ,OAAAqK,EAAA,EAAArK,CAAA,GAAIiJ,EAAX,CAAcqB,SAAUC,GAAgB,EAAG,EAAGtB,EAAEuB,EAAGvB,EAAEwB,OAE5BC,KAAK,SAACxJ,EAAGyJ,GAAJ,OAAUzJ,EAAEoJ,SAAWK,EAAEL,YAjB3DM,oBAqBG,SAAoCR,GACvC,GAAsB,IAAlBA,EAAOlL,OACP,MAAO,GAGX,IAAI2L,EAA0BT,EAAO9J,OAAO,SAACwK,EAA4BC,GACrE,IAAIC,EAAWT,GAAgB,EAAG,EAAGO,EAAYN,EAAGM,EAAYL,GAC5DQ,EAAYV,GAAgB,EAAG,EAAGQ,EAAaP,EAAGO,EAAaN,GACnE,OAAOO,EAAWC,EAAYF,EAAeD,IAG7CI,EAAiC,CAACL,GAClCM,EAA+Bf,EAAOlK,QAC1CiL,EAAcA,EAAYnC,OAAO,SAAAC,GAAC,OAAIA,EAAE1C,KAAOsE,EAAwBtE,KAEvE,IAAI6E,EAA+BP,EAC7BQ,EAA0B,SAACP,EAA4BC,GACzD,IAAIC,EAAWT,GAAgBa,EAAcZ,EAAGY,EAAcX,EAAGK,EAAYN,EAAGM,EAAYL,GACxFQ,EAAYV,GAAgBa,EAAcZ,EAAGY,EAAcX,EAAGM,EAAaP,EAAGO,EAAaN,GAC/F,OAAOO,EAAWC,EAAYF,EAAeD,GAnBgCQ,EAAA,WAsB7E,IAAIC,EAA+BJ,EAAY7K,OAAO+K,GACtDH,EAAczD,KAAK8D,GACnBJ,EAAcA,EAAYnC,OAAO,SAAAC,GAAC,OAAIA,EAAE1C,KAAOgF,EAAchF,KAC7D6E,EAAgBG,GAJpB,KAAOJ,EAAYjM,OAAS,GAAGoM,IAO/B,OAAOJ,GAhDPM,SAyDG,SAAepB,GAClB,OAAOA,EAAOM,KAAK,SAACxJ,EAAGyJ,GACnB,OAAOzJ,EAAEsJ,IAAMG,EAAEH,EACX,EACAtJ,EAAEsJ,EAAIG,EAAEH,EAAI,GAAK,KA5D3BiB,SAiEG,SAAerB,GAClB,OAAOA,EAAOM,KAAK,SAACxJ,EAAGyJ,GACnB,OAAOzJ,EAAEuJ,IAAME,EAAEF,EACX,EACAvJ,EAAEuJ,EAAIE,EAAEF,EAAI,GAAK,KApE3BiB,aAkDG,SAAgBtB,GACnB,OAAOA,IAhDX,SAASG,GAAgBoB,EAAiBC,EAAiBpB,EAAWC,GAClE,IAAIvJ,EAAIyK,EAAUnB,EACdG,EAAIiB,EAAUnB,EAClB,OAAOjL,KAAKqM,KAAM3K,EAAEA,EAAMyJ,EAAEA,GC7BhC,IAAMmB,GAAuB,GACvBC,GAA4B,IAC5BC,GAA4B,IAC5BC,GAAwB,GAO9B,SAASC,GAAkBC,EAAeC,GAItC,IAFA,IAAIC,EAAgC,GAChCC,EAAgB,EACXhN,EAAI,EAAGgN,EAAgBF,EAAO9M,IACnC+M,EAAe5E,KAAK,CAAE8E,OAAQjN,EAAI6M,EAAOA,MAAOA,IAChDG,GAAiBH,EAErB,OAAQE,EA6HL,SAASG,GAAe3F,EAAe3C,EAAoCuI,EAAcC,EAAmBC,GAC/G,OAAO,IAAIC,QAAQ,SAACC,EAASC,GAEzB,IAAMC,EAAa,IAAIC,IAGvB,OAFAD,EAAWE,eAAepG,GAEnBkG,EAAWP,eAAetI,EAAKqC,GAAI,CACtCkG,KAAMA,EACNvD,OAAQwD,EACRQ,YAAa,wCAEZC,KALE,eAAAC,EAAApN,OAAAqN,EAAA,EAAArN,CAAAsN,EAAApM,EAAAqM,KAKG,SAAAC,EAAMC,GAAN,IAAA3N,EAAAR,EAAA,OAAAgO,EAAApM,EAAAwM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEI/N,EAAqBH,EAAUgN,EAAY,KAGxCrN,EAAI,EALX,YAKcA,EAAIQ,EAAOZ,QALzB,CAAAyO,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAMQd,EAAWe,oBAAoBL,EAASlH,GAAIzG,EAAOR,IACpDyO,MAAM,SAAAC,GAAG,OAAIlB,EAAOkB,KAP3B,OAKiC1O,IALjCqO,EAAAE,KAAA,eAWFJ,EAAS9E,OAAOyD,MAAQO,EAAWzN,OACnC2N,EAAQ7M,OAAAqK,EAAA,EAAArK,CAAA,GAAIyN,EAAL,CAAeQ,UAAW,MAZ/B,yBAAAN,EAAAO,SAAAV,MALH,gBAAAW,GAAA,OAAAf,EAAAgB,MAAAC,KAAAC,YAAA,GAkBA,SAAAN,GACClB,EAAOkB,OC9IhB,IAAMO,GAAqE,CAC9EC,aAAgB,CACZlM,IAAK,eACLmM,IAAK,EACLC,IAAK,EACLC,cAAc,GAElBC,aAAgB,CACZtM,IAAK,eACLmM,IAAK,EACLC,IAAK,EACLC,cAAc,GAElBE,SAAY,CACRvM,IAAK,cACLmM,IAAK,EACLC,SAAKjK,EACLkK,cAAc,GAElBG,OAAU,CACNxM,IAAK,SACLmM,IAAK,EACLC,IAAK,EACLC,cAAc,GAElBI,iBAAoB,CAChBzM,IAAK,mBACLmM,IAAK,EACLC,IAAK,EACLC,cAAc,GAElBK,IAAO,CACH1M,IAAK,MACLmM,SAAKhK,EACLiK,SAAKjK,EACLkK,cAAc,GAElBM,SAAY,CACR3M,IAAK,WACLmM,IAAK,EACLC,IAAK,EACLC,cAAc,GAElBO,SAAY,CACR5M,IAAK,WACLmM,KAAM,GACNC,IAAK,EACLC,cAAc,GAElBQ,KAAQ,CACJ7M,IAAK,OACLmM,IAAK,EACLC,IAAK,EACLC,cAAc,GAElBS,YAAe,CACX9M,IAAK,cACLmM,IAAK,EACLC,IAAK,EACLC,cAAc,GAElBU,MAAS,CACL/M,IAAK,QACLmM,SAAKhK,EACLiK,SAAKjK,EACLkK,cAAc,GAElBW,iBAAkB,CACdhN,IAAK,iBACLmM,IAAK,EACLC,SAAKjK,EACLkK,cAAc,GAElBY,QAAW,CACPjN,IAAK,UACLmM,IAAK,EACLC,IAAK,EACLC,cAAc,2HChGtB,SAASa,KACL,MAAO,CACHC,YAAa3O,OAAO2O,YACpBC,WAAY5O,OAAO4O,WACnBC,YAAa7O,OAAO6O,YACpBC,WAAY9O,OAAO8O,YCC3B,IAkFeC,GAhF4C,SAACnP,GAAkB,IACnEgI,EAAwFhI,EAAxFgI,UAAWoH,EAA6EpP,EAA7EoP,oBAAqBC,EAAwDrP,EAAxDqP,0BAA2BC,EAA6BtP,EAA7BsP,0BADQjJ,EAGZC,oBAAS,GAHGC,EAAAjH,OAAAkH,EAAA,EAAAlH,CAAA+G,EAAA,GAGnEkJ,EAHmEhJ,EAAA,GAG1CiJ,EAH0CjJ,EAAA,GAAAkJ,EAI9CnJ,mBAAS,IAJqCoJ,EAAApQ,OAAAkH,EAAA,EAAAlH,CAAAmQ,EAAA,GAInEE,EAJmED,EAAA,GAI3DE,EAJ2DF,EAAA,GAKpEG,EDJK,WAA2C,IAAAxJ,EACpBC,mBAA2BwI,MADPvI,EAAAjH,OAAAkH,EAAA,EAAAlH,CAAA+G,EAAA,GACjDwJ,EADiDtJ,EAAA,GACrCuJ,EADqCvJ,EAAA,GAGtD,SAASwJ,IACLD,EAAchB,MAUlB,OAPAnI,oBAAU,WAEN,OADAvG,OAAO4P,iBAAiB,SAAUD,GAC3B,WACH3P,OAAO6P,oBAAoB,SAAUF,KAE1C,IAEIF,ECVYK,GAGbC,EAAgC,SAACxN,GAAD,OAAoB,WAClDA,GAASyM,EAAoB5Q,OAAS,GACtC8Q,EAA0BF,EAAoB5Q,OAAS,EAAI,CAAC4Q,EAAoB,IAAM,IAAI,GAE9FI,EAA2B7M,KAezByN,EADoBpI,EAAUM,OAAO,SAAAC,GAAC,OAAgC,IAA5BA,EAAEwD,KAAKsE,QAAQV,KAA6C,IAA3BpH,EAAEM,IAAIwH,QAAQV,KACrD3F,KAAK,SAACxJ,EAAyCyJ,GAA1C,OAAsFzJ,EAAEuL,OAAS9B,EAAE8B,KAAO,EAAIvL,EAAEuL,KAAO9B,EAAE8B,KAAO,GAAK,IAIpL,OAAOxL,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACHH,EAAAC,EAAAC,cAAA,MAAIwB,UAAU,QAAd,qBACA1B,EAAAC,EAAAC,cAAA,OAAK6D,MAAO,CAAEE,MAAO,IAAKyE,SAAU,OAAQG,OAAQ,SAChD7I,EAAAC,EAAAC,cAAC6P,GAAA9P,EAAD,CAAY8D,MAAO,CAAEqE,aAAc,IAC/BpI,EAAAC,EAAAC,cAAC6P,GAAA9P,EAAW+P,QAAZ,KACIhQ,EAAAC,EAAAC,cAAC6P,GAAA9P,EAAWgQ,KAAZ,KAP8BX,EAAWb,WAAa,IAOA,mBAAoB,WAE9EzO,EAAAC,EAAAC,cAACgQ,GAAAjQ,EAAD,CAAakQ,YAAY,mBAAmB/N,MAAOgN,EAAQgB,SA/BhD,SAACC,GAAD,OAAiChB,EAAUgB,EAAMC,cAAclO,UAgCzE0M,GAA6B9O,EAAAC,EAAAC,cAACqQ,GAAAtQ,EAAD,CAC1BuQ,GAAIC,KAAWC,OACfpN,QAAQ,oBACR+E,MAAO2G,EAA0B,SAAW,WAC5C1J,GAAG,2BACHqL,YAAU,GAEV3Q,EAAAC,EAAAC,cAAC0Q,GAAA3Q,EAAS4Q,KAAV,CAAetN,QAASqM,GAA8B,IAAtD,6BACA5P,EAAAC,EAAAC,cAAC0Q,GAAA3Q,EAAS4Q,KAAV,CAAetN,QAASqM,GAA8B,IAAtD,iCAIR5P,EAAAC,EAAAC,cAAA,OAAK6D,MAAO,CAAE+M,UAAW,IAAKC,UAAW,SACrC/Q,EAAAC,EAAAC,cAAC8Q,GAAA/Q,EAAD,CAAOgR,SAAO,EAACC,OAAK,GAChBlR,EAAAC,EAAAC,cAAA,aACK2P,EAAgBzO,IAAI,SAAAoL,GAAQ,OACzBxM,EAAAC,EAAAC,cAAA,MACImB,IAAKmL,EAASlH,GACd/B,SA3CS4N,EA2C4B3E,EAASlH,GA3Cb,WACrD0J,IAA4BF,EAC5BC,EAA0B,CAACoC,IAAc,IAES,IAA9CtC,EAAoBiB,QAAQqB,GAC5BpC,EAAyB,GAAAjQ,OAAAC,OAAAC,EAAA,EAAAD,CAAM8P,GAAN,CAA2BsC,KAAe,GAEnEpC,EAA0BhQ,OAAAC,EAAA,EAAAD,CAAK8P,EAAoB9G,OAAO,SAAAqJ,GAAG,OAAIA,IAAQD,MAAgB,KAqCzEpN,MAAO,CAAEmB,OAAQ,UAAWmM,YAA0D,IAA9CxC,EAAoBiB,QAAQtD,EAASlH,IA5DlF,gFA4DoH9B,EAAW8N,QAAS,OAAQC,oBAAqB,aAEhKvR,EAAAC,EAAAC,cAAA,MAAI6D,MAAO,CAAEyN,QAAS,IACjBhF,EAAS9I,OAAOzF,OAAS,GAAK+B,EAAAC,EAAAC,cAAA,OAAKuD,IAAK+I,EAAS9I,OAAO,GAAGC,IAAKI,MAAO,CAAEE,MAAO,QAAUJ,IAAK,gBAAkB2I,EAAShB,QAE/HxL,EAAAC,EAAAC,cAAA,MAAI6D,MAAO,CAAE4E,UAAW,OAAQ6I,QAAS,eACrCxR,EAAAC,EAAAC,cAAA,OAAK6D,MAAO,CAAE0N,SAAU,KAAOjF,EAAShB,MACxCxL,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACwR,GAAAzR,EAAD,CAAOqD,QAAQ,WAAWkJ,EAASmF,MAAM7N,cACzC9D,EAAAC,EAAAC,cAACwR,GAAAzR,EAAD,CAAOqD,QAAQ,OAAO5B,UAAU,QAAhC,UAA+C8K,EAAS9E,OAAOyD,OAC/DnL,EAAAC,EAAAC,cAACwR,GAAAzR,EAAD,CAAOqD,QAAQ,SAAS5B,UAAU,QAAQ8K,EAASvE,OAAS,SAAW,cAtDvE,IAACkJ,UCO1BS,GA9B0C,SAACnS,GAAkB,IAChEgI,EAA6BhI,EAA7BgI,UAAWoK,EAAkBpS,EAAlBoS,cAEnB,GAAyB,IAArBpK,EAAUxJ,OAAc,CACxB,IAAMuO,EAAW/E,EAAU,GAC3B,OAAOzH,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACHH,EAAAC,EAAAC,cAAA,MAAIwB,UAAU,aAAa8K,EAAShB,MACpCxL,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,KAAGW,KAAM2L,EAASmF,MAAMG,cAAcC,SAAS/R,EAAAC,EAAAC,cAACwR,GAAAzR,EAAD,CAAOqD,QAAQ,WAAWkJ,EAASmF,MAAM7N,eACxF9D,EAAAC,EAAAC,cAACwR,GAAAzR,EAAD,CAAOqD,QAAQ,OAAO5B,UAAU,QAAhC,UAA+C8K,EAAS9E,OAAOyD,OAC/DnL,EAAAC,EAAAC,cAAA,KAAGW,KAAM2L,EAASsF,cAAcC,QAASrQ,UAAU,QAAO1B,EAAAC,EAAAC,cAACwR,GAAAzR,EAAD,CAAOqD,QAAQ,WAAf,YAC1DtD,EAAAC,EAAAC,cAACwR,GAAAzR,EAAD,CAAOqD,QAAQ,SAAS5B,UAAU,QAAQ8K,EAASvE,OAAS,SAAW,YAE1E4J,GAAiB7R,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,oBAC7B1B,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,CAASwB,UAAU,aAI3B,OAAOzB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACHH,EAAAC,EAAAC,cAAA,MAAIwB,UAAU,aAAa+F,EAAUxJ,OAArC,YAAsDwJ,EAAUxJ,OAAS,GAAK,IAA9E,aACA+B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACwR,GAAAzR,EAAD,CAAOqD,QAAQ,OAAO5B,UAAU,QAAhC,UAA+C+F,EAAUrG,IAAI,SAAA4G,GAAC,OAAIA,EAAEN,OAAOyD,QAAO9L,OAAO,SAACY,EAAGyJ,GAAJ,OAAUzJ,EAAIyJ,MAE1GmI,GAAiB7R,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,oBAC7B1B,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,CAASwB,UAAU,kCC2BnC,IA2FeuQ,GA3FqC,SAACvS,GAAkB,IAC3DiI,EAAiGjI,EAAjGiI,OAAQuK,EAAyFxS,EAAzFwS,oBAAqBC,EAAoEzS,EAApEyS,oBAAqBC,EAA+C1S,EAA/C0S,qBAAsBC,EAAyB3S,EAAzB2S,qBACxEC,EAAuF5S,EAAvF4S,oBAAqBC,EAAkE7S,EAAlE6S,oBAAqBC,EAA6C9S,EAA7C8S,oBAAqBC,EAAwB/S,EAAxB+S,oBAEjErJ,EAAuBzB,EAAOtG,IAAI,SAAAuF,GACpC,IAAM8L,EAAQ,CACVnN,GAAIqB,EAAErB,GACN+C,MAAO1B,EAAE6E,KACTkH,OAAQ/L,EAAEgM,QAAQvR,IAAI,SAAAnB,GAAC,OAAIA,EAAEuL,OAAMjK,KAAK,MACxCtD,OAAQ0I,EAAEiM,aAGd,YAAyBpP,IAArBmD,EAAEkM,gBAAqD,OAArBlM,EAAEkM,eAG7B,CAAEtJ,EAFE5C,EAAEkM,eAAgBZ,GAEdzI,EADJ7C,EAAEkM,eAAgBX,GACRO,MAAOA,QACAjP,IAArBmD,EAAEkM,eACF,CAAEtJ,EAAG,EAAGC,EAAG,EAAGiJ,MAAOA,GAErB,OAEZ1K,OAAO,SAAC+K,GAAD,OAAiC,OAAPA,IAG9BC,EAAuBxU,KAAKiP,IAALL,MAAA5O,KAAIQ,OAAAC,EAAA,EAAAD,CAAQoK,EAAO/H,IAAI,SAAA4G,GAAC,OAAIA,EAAEuB,MACrDyJ,EAAuBzU,KAAKiP,IAALL,MAAA5O,KAAIQ,OAAAC,EAAA,EAAAD,CAAQoK,EAAO/H,IAAI,SAAA4G,GAAC,OAAIA,EAAEwB,MACrDyJ,EAAuB1U,KAAKkP,IAALN,MAAA5O,KAAIQ,OAAAC,EAAA,EAAAD,CAAQoK,EAAO/H,IAAI,SAAA4G,GAAC,OAAIA,EAAEuB,MACrD2J,EAAuB3U,KAAKkP,IAALN,MAAA5O,KAAIQ,OAAAC,EAAA,EAAAD,CAAQoK,EAAO/H,IAAI,SAAA4G,GAAC,OAAIA,EAAEwB,MAGrD2J,OAA+C3P,IAAxB6O,EAAoC9T,KAAKiP,IAAI6E,EAAqBU,GAAgBA,EACzGK,OAA+C5P,IAAxB8O,EAAoC/T,KAAKkP,IAAI6E,EAAqBW,GAAgBA,EACzGI,OAA+C7P,IAAxB+O,EAAoChU,KAAKiP,IAAI+E,EAAqBS,GAAgBA,EACzGM,OAA+C9P,IAAxBgP,EAAoCjU,KAAKkP,IAAI+E,EAAqBU,GAAgBA,EAGzGK,OAA0D/P,IAAxB6O,EAAoC9T,KAAKiP,IAAI6E,EAAqBU,QAAgBvP,EACpHgQ,OAA0DhQ,IAAxB8O,EAAoC/T,KAAKkP,IAAI6E,EAAqBW,QAAgBzP,EACpHiQ,OAA0DjQ,IAAxB+O,EAAoChU,KAAKiP,IAAI+E,EAAqBS,QAAgBxP,EACpHkQ,OAA0DlQ,IAAxBgP,EAAoCjU,KAAKkP,IAAI+E,EAAqBU,QAAgB1P,EAE1H,OAAOxD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACHH,EAAAC,EAAAC,cAACyT,GAAA1T,EAAD,CACIP,KAAM,CAAC,CACH8J,EAAGL,EAAO/H,IAAI,SAAA4G,GAAC,OAAIA,EAAEwB,IACrBD,EAAGJ,EAAO/H,IAAI,SAAA4G,GAAC,OAAIA,EAAEuB,IACrBqK,KAAMzK,EAAO/H,IAAI,SAAA4G,GAAC,MAAI,UAAYA,EAAEyK,MAAMpK,MAAQ,eAAiBL,EAAEyK,MAAMC,OAAS,OAASP,EAAuB,KAAOnK,EAAEuB,EAAI,OAAS6I,EAAuB,KAAOpK,EAAEwB,IAC1KqK,UAAW,OACXC,KAAM,gBACNC,OAAQ,CACJC,KAAM,GACNC,MAAO9K,EAAO/H,IAAI,SAAA4G,GAEd,MAAO,IAjE/B,SAAqCkM,EAA0BC,EAAwBC,GACnF,IAAMC,EAAM,SAAC9K,GACT,IAAI+K,EAAM/K,EAAEgL,SAAS,IACrB,OAAuB,IAAfD,EAAIrW,OAAgB,IAAMqW,EAAMA,GAGxCE,EAAIjW,KAAKkW,KAAK9R,SAASwR,EAAeO,UAAU,EAAE,GAAI,IAAMN,EAAazR,SAASuR,EAAiBQ,UAAU,EAAE,GAAI,KAAO,EAAEN,IAC5HO,EAAIpW,KAAKkW,KAAK9R,SAASwR,EAAeO,UAAU,EAAE,GAAI,IAAMN,EAAazR,SAASuR,EAAiBQ,UAAU,EAAE,GAAI,KAAO,EAAEN,IAC5H1K,EAAInL,KAAKkW,KAAK9R,SAASwR,EAAeO,UAAU,EAAE,GAAI,IAAMN,EAAazR,SAASuR,EAAiBQ,UAAU,EAAE,GAAI,KAAO,EAAEN,IAChI,OAAOC,EAAIG,GAAKH,EAAIM,GAAKN,EAAI3K,GAwDIkL,CAA4B,SAAU,SAnF3E,SAAgFC,EAAcC,EAAYC,GAEtG,IAAIC,EAAYF,EAAIvL,EAAIsL,EAAMtL,EAA1ByL,EAAgCF,EAAItL,EAAIqL,EAAMrL,EAE9CyL,EAAMD,EAASA,EAASA,EAASA,EACjCE,GAFYH,EAAMxL,EAAIsL,EAAMtL,GAEbyL,GAFmBD,EAAMvL,EAAIqL,EAAMrL,GAEjBwL,EAUrC,OATQzW,KAAKiP,IAAK,EAAGjP,KAAKkP,IAAK,EAAGyH,EAAMD,IA4EQE,CAAuE,CAAC5L,EAAG4J,EAAc3J,EAAG6J,GAAe,CAAC9J,EAAG6J,EAAc5J,EAAG8J,GAAe,CAAC/J,EAAGvB,EAAEuB,EAAGC,EAAGxB,EAAEwB,QAIjM4L,KAAM,CACFnB,MAAO,wBACPhQ,MAAO,KAGfoR,OAAQ,CACJC,UAAW,UACXzM,OAAQ,CAAClC,EAAG,EAAG+C,EAAG,EAAG6L,EAAG,EAAGf,EAAG,GAC9BgB,aAAc,cACdC,cAAe,cACfC,MAAO,CACHC,MAAO,CAACpC,EAAaC,IAEzBoC,MAAO,CACHD,MAAO,CAAClC,EAAaC,KAG7BmC,kBAAkB,EAClB9R,MAAO,CACHE,MAAO,OACPyE,SAAU,IACV1E,OAAQ,IACR6E,OAAQ,OACRiN,OAAQ,oBACRC,SAAU,SACV7R,aAAc,MAGrBwD,EAAOK,OAAO,SAAA9H,GAAC,OAAyB,OAArBA,EAAE4S,iBAAyB5U,OAAS,GAAK+B,EAAAC,EAAAC,cAAC8V,EAAA/V,EAAD,CAAOqD,QAAQ,UAAU5B,UAAU,uBAAnC,kDAEzD1B,EAAAC,EAAAC,cAAA,WAFyD,qIClI/D+V,GAAyC,CAC3CC,SAAU,SACVC,IAAK,EACL9E,WAAY,QACZ+E,UAAW,GA6CAC,GAxCqC,SAAC5W,GAAkB,IAC5DiI,EAAwFjI,EAAxFiI,OAAQ4O,EAAgF7W,EAAhF6W,gBAAiBnE,EAA+D1S,EAA/D0S,qBAAsBoE,EAAyC9W,EAAzC8W,gBAAiBnE,EAAwB3S,EAAxB2S,qBADJtM,EAG1CC,mBAAS/H,EAAa,KAAxCwY,EAH4DzX,OAAAkH,EAAA,EAAAlH,CAAA+G,EAAA,MAAAoJ,EAInCnJ,oBANZ,GAE+CoJ,EAAApQ,OAAAkH,EAAA,EAAAlH,CAAAmQ,EAAA,GAI5DuH,EAJ4DtH,EAAA,GAIlDuH,EAJkDvH,EAAA,GAOnE,OAAOnP,EAAAC,EAAAC,cAACyW,GAAA1W,EAAD,CAAW2W,sBAAqDpT,EAAWO,MAAO,CAAE2E,SAAU,IAAKG,OAAQ,SAC9G7I,EAAAC,EAAAC,cAAC2W,GAAA5W,EAAD,KACID,EAAAC,EAAAC,cAACyW,GAAA1W,EAAUkF,OAAX,CAAkBqL,GAAIsG,KAAK5P,OAAQ6P,SAAUP,EAAgBjT,QAJ7C,kBAAMmT,GAAaD,KAIqDA,EAAW,wCAA0C,uCAC7IzW,EAAAC,EAAAC,cAACyW,GAAA1W,EAAUoF,SAAX,CAAoB0R,SAAUP,GAC1BxW,EAAAC,EAAAC,cAAC2W,GAAA5W,EAAKoH,KAAN,CAAW3F,UAAU,MAAMqC,MAAO,CAAE+M,UAAW,IAAKkG,UAAW,OAAQZ,UAAW,sBAC9EpW,EAAAC,EAAAC,cAAC8Q,GAAA/Q,EAAD,CAAOgX,UAAQ,EAAChG,SAAO,EAAC+C,KAAK,KAAKjQ,MAAO,CAACqS,UAAW,IACjDpW,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAI6D,MAAOkS,IAAX,SACAjW,EAAAC,EAAAC,cAAA,MAAI6D,MAAOkS,IAAX,SACAjW,EAAAC,EAAAC,cAAA,MAAI6D,MAAOkS,GAAmBvU,UAAU,0BAAxC,WACA1B,EAAAC,EAAAC,cAAA,MAAI6D,MAAOkS,IAAoB9D,GAC/BnS,EAAAC,EAAAC,cAAA,MAAI6D,MAAOkS,IAAoB7D,KAGvCpS,EAAAC,EAAAC,cAAA,aACKwH,EAAOtG,IAAI,SAAAqR,GAAK,OAAIzS,EAAAC,EAAAC,cAAA,MAAImB,IAAKoR,EAAMnN,IAChCtF,EAAAC,EAAAC,cAAA,MAAI6D,MAAO0O,EAAMyE,MAAMC,MAAQ1E,EAAMyE,MAAME,SAAW,EAAI,CAACnD,MAAO,SAAWxB,EAAMyE,MAAMC,MAAQ1E,EAAMyE,MAAME,OAAS,EAAI,CAACnD,MAAO,SAAW,CAACA,MAAO,QAChJxB,EAAMyE,MAAME,OAAS3E,EAAMyE,MAAMC,OAEtCnX,EAAAC,EAAAC,cAAA,UAAKuS,EAAMjH,MACXxL,EAAAC,EAAAC,cAAA,MAAIwB,UAAU,0BAA0B+Q,EAAME,QAAQvR,IAAI,SAAAnB,GAAC,OAAIA,EAAEuL,OAAMjK,KAAK,OAC5EvB,EAAAC,EAAAC,cAAA,eAA8BsD,IAAzBiP,EAAMI,gBAAyD,OAAzBJ,EAAMI,gBAA2BJ,EAAMI,eAAgByD,IAClGtW,EAAAC,EAAAC,cAAA,eAA8BsD,IAAzBiP,EAAMI,gBAAyD,OAAzBJ,EAAMI,gBAA2BJ,EAAMI,eAAgB0D,cCcnHc,GApD2C,SAAC5X,GACvD,OAAOO,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACHH,EAAAC,EAAAC,cAAC6P,GAAA9P,EAAD,CAAYyB,UAAU,YAAYqC,MAAO,CAACuN,QAAS,cAAerN,MAAO,SACrEjE,EAAAC,EAAAC,cAAC6P,GAAA9P,EAAW+P,QAAZ,KACIhQ,EAAAC,EAAAC,cAAC6P,GAAA9P,EAAWgQ,KAAZ,2BAEJjQ,EAAAC,EAAAC,cAACqQ,GAAAtQ,EAAD,CACIuQ,GAAIC,KAAWC,OACfpN,QAAQ,oBACR+E,MAAO5I,EAAM6X,gBACbhS,GAAG,UAEF7F,EAAM8X,yBAAyBnW,IAAI,SAAAoW,GAAa,OAC7CxX,EAAAC,EAAAC,cAAC0Q,GAAA3Q,EAAS4Q,KAAV,CAAexP,IAAKmW,EAAejU,QAAS,kBAAM9D,EAAMgY,cAAcD,KAAiBA,OAKnGxX,EAAAC,EAAAC,cAAC6P,GAAA9P,EAAD,CAAYyB,UAAU,YAAYqC,MAAO,CAACuN,QAAS,cAAerN,MAAO,SACrEjE,EAAAC,EAAAC,cAAC6P,GAAA9P,EAAW+P,QAAZ,KACIhQ,EAAAC,EAAAC,cAAC6P,GAAA9P,EAAWgQ,KAAZ,2BAEJjQ,EAAAC,EAAAC,cAACqQ,GAAAtQ,EAAD,CACIuQ,GAAIC,KAAWC,OACfpN,QAAQ,oBACR+E,MAAO5I,EAAMiY,gBACbpS,GAAG,UAEF7F,EAAM8X,yBAAyBnW,IAAI,SAAAoW,GAAa,OAC7CxX,EAAAC,EAAAC,cAAC0Q,GAAA3Q,EAAS4Q,KAAV,CAAexP,IAAKmW,EAAejU,QAAS,kBAAM9D,EAAMkY,cAAcH,KAAiBA,OAKnGxX,EAAAC,EAAAC,cAAC6P,GAAA9P,EAAD,CAAYyB,UAAU,OAAOqC,MAAO,CAACuN,QAAS,cAAerN,MAAO,SAChEjE,EAAAC,EAAAC,cAAC6P,GAAA9P,EAAW+P,QAAZ,KACIhQ,EAAAC,EAAAC,cAAC6P,GAAA9P,EAAWgQ,KAAZ,qBAEJjQ,EAAAC,EAAAC,cAACqQ,GAAAtQ,EAAD,CACIuQ,GAAIC,KAAWC,OACfpN,QAAQ,oBACR+E,MAAO5I,EAAMmY,wBACbtS,GAAG,eAEF7F,EAAMoY,gCAAgCzW,IAAI,SAAA0W,GAAc,OACrD9X,EAAAC,EAAAC,cAAC0Q,GAAA3Q,EAAS4Q,KAAV,CAAexP,IAAKyW,EAAgBvU,QAAS,kBAAM9D,EAAMsY,mBAAmBD,KAAkBA,SCiDnGE,GAhGwC,SAACvY,GAAkB,IAC9DwY,EAAaxY,EAAbwY,SAD8DnS,EAG9CC,mBAAS,IAHqCC,EAAAjH,OAAAkH,EAAA,EAAAlH,CAAA+G,EAAA,GAG/D0F,EAH+DxF,EAAA,GAGzDkS,EAHyDlS,EAAA,GAAAkJ,EAIlCnJ,oBAAS,GAJyBoJ,EAAApQ,OAAAkH,EAAA,EAAAlH,CAAAmQ,EAAA,GAI/DiJ,EAJ+DhJ,EAAA,GAInDiJ,EAJmDjJ,EAAA,GAAAkJ,EAKhCtS,oBAAS,GALuBuS,EAAAvZ,OAAAkH,EAAA,EAAAlH,CAAAsZ,EAAA,GAK/DE,EAL+DD,EAAA,GAKlDE,EALkDF,EAAA,GAOhEG,EAAe,SAACC,QACYlV,IAA1BkV,EAAEpI,cAAclO,QAChB8V,EAAQQ,EAAEpI,cAAclO,OACxBoW,EAAyC,KAA1BE,EAAEpI,cAAclO,SAIjCuW,EAAqB,SAACR,GAAD,OAAyB,kBAAMC,EAAcD,KAElES,EAAW,WACA,KAATpN,EACAgN,GAAe,GAEfP,EAASzM,EAAM2M,GACVjM,KAAK,SAAA2M,GACEA,GACAX,EAAQ,IACRY,IAAUD,QACN,6EACA,CAAE3C,SAAU,gBAAiB6C,QAAS,mBAAoBC,UAAW,GAAIzV,QAAS,SAAC0V,GAAD,OAAeA,QAGrGH,IAAUI,MACN,uGACA,CAAEhD,SAAU,gBAAiB6C,QAAS,4BAA6BC,UAAW,GAAIzV,QAAS,SAAC0V,GAAD,OAAeA,UAOlI,OAAOjZ,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACHH,EAAAC,EAAAC,cAAA,MAAIwB,UAAU,QAAd,uBACA1B,EAAAC,EAAAC,cAAC6P,GAAA9P,EAAD,CAAYyB,UAAU,+BAA+BqC,MAAO,CAAE2E,SAAU,MACpE1I,EAAAC,EAAAC,cAAC6P,GAAA9P,EAAW+P,QAAZ,KACIhQ,EAAAC,EAAAC,cAAC6P,GAAA9P,EAAWgQ,KAAZ,CAAiB3K,GAAG,iBAApB,kBAEJtF,EAAAC,EAAAC,cAACgQ,GAAAjQ,EAAD,CACIkQ,YAAY,gBACZgJ,aAAW,gBACXC,mBAAiB,gBACjBhX,MAAOoJ,EACP4E,SAAUqI,EACVY,UAAWd,IAEfvY,EAAAC,EAAAC,cAACqQ,GAAAtQ,EAAD,CACIuQ,GAAIC,KAAWC,OACfpN,QAAS,oBACT+E,MAAO8P,EAAa,SAAW,UAC/B7S,GAAG,gBAEHtF,EAAAC,EAAAC,cAAC0Q,GAAA3Q,EAAS4Q,KAAV,CAAetN,QAASoV,GAAmB,IAA3C,WACA3Y,EAAAC,EAAAC,cAAC0Q,GAAA3Q,EAAS4Q,KAAV,CAAetN,QAASoV,GAAmB,IAA3C,WAEJ3Y,EAAAC,EAAAC,cAAC6P,GAAA9P,EAAWyQ,OAAZ,KACI1Q,EAAAC,EAAAC,cAACmD,EAAApD,EAAD,CAAQqD,QAAS,oBAAqBC,QAASqV,GAA/C,YAIR5Y,EAAAC,EAAAC,cAAC6P,GAAA9P,EAAD,CAAYyB,UAAU,+BAA+BqC,MAAO,CAAE2E,SAAU,IAAK4Q,eAAgB,WACzFtZ,EAAAC,EAAAC,cAAC6P,GAAA9P,EAAW+P,QAAZ,KACIhQ,EAAAC,EAAAC,cAAC6P,GAAA9P,EAAWgQ,KAAZ,CAAiB3K,GAAG,iBAApB,kBAEJtF,EAAAC,EAAAC,cAACgQ,GAAAjQ,EAAD,CACIkQ,YAAY,gBACZgJ,aAAW,gBACXC,mBAAiB,gBACjBhX,MAAOoJ,EACP4E,SAAUqI,EACVY,UAAWd,KAGnBvY,EAAAC,EAAAC,cAAC6P,GAAA9P,EAAD,CAAYyB,UAAU,+BAA+BqC,MAAO,CAAE2E,SAAU,IAAK4Q,eAAgB,WACzFtZ,EAAAC,EAAAC,cAACqQ,GAAAtQ,EAAD,CACIuQ,GAAIC,KAAWT,QACf1M,QAAS,oBACT+E,MAAO8P,EAAa,SAAW,UAC/B7S,GAAG,gBAEHtF,EAAAC,EAAAC,cAAC0Q,GAAA3Q,EAAS4Q,KAAV,CAAetN,QAASoV,GAAmB,IAA3C,WACA3Y,EAAAC,EAAAC,cAAC0Q,GAAA3Q,EAAS4Q,KAAV,CAAetN,QAASoV,GAAmB,IAA3C,WAEJ3Y,EAAAC,EAAAC,cAAC6P,GAAA9P,EAAWyQ,OAAZ,KACI1Q,EAAAC,EAAAC,cAACmD,EAAApD,EAAD,CAAQqD,QAAS,oBAAqBC,QAASqV,GAA/C,cCiGDW,GA1KsC,SAAC9Z,GAAkB,IAC5DmG,EAAqDnG,EAArDmG,MAAO3C,EAA8CxD,EAA9CwD,KAAMwE,EAAwChI,EAAxCgI,UAAWC,EAA6BjI,EAA7BiI,OAAQ8R,EAAqB/Z,EAArB+Z,iBAChCC,EAA2Cha,EAA3Cga,gBAAiBC,EAA0Bja,EAA1Bia,sBAEzBlR,mBAAS,qBAJ2D,IAAA1C,EAKdC,mBAAmB,IALLC,EAAAjH,OAAAkH,EAAA,EAAAlH,CAAA+G,EAAA,GAK7D+I,EAL6D7I,EAAA,GAKxC2T,EALwC3T,EAAA,GAAAkJ,EAM5BnJ,mBAAuB,CAAEwD,EAAG,UAAWC,EAAG,WANd2F,EAAApQ,OAAAkH,EAAA,EAAAlH,CAAAmQ,EAAA,GAM7D0K,EAN6DzK,EAAA,GAM/C0K,EAN+C1K,EAAA,GAAAkJ,EAO1BtS,mBAAiB,wBAPSuS,EAAAvZ,OAAAkH,EAAA,EAAAlH,CAAAsZ,EAAA,GAO7DyB,EAP6DxB,EAAA,GAO9CyB,EAP8CzB,EAAA,GAAA0B,EAQxBjU,mBAA2B,IARHkU,EAAAlb,OAAAkH,EAAA,EAAAlH,CAAAib,EAAA,GAQ7DE,EAR6DD,EAAA,GAQ7CE,EAR6CF,EAAA,GAAAG,EASRrU,oBAAS,GATDsU,EAAAtb,OAAAkH,EAAA,EAAAlH,CAAAqb,EAAA,GAS7DE,EAT6DD,EAAA,GASrCE,EATqCF,EAAA,GAU9DG,EAA6BC,iBAAkC,MA0BrErU,oBAAU,WACN,GAAIyI,EAAoB5Q,OAAS,EAAG,CAChC,IAAMyc,EAAwC7L,EAAoBzN,IAAI,SAAAgQ,GAAG,OAAIA,KAAO3J,EAAYA,EAAU2J,GAAKpE,UAAY,KAAI2N,OACzHC,EAAqD7b,OAAO+I,OAAOJ,GACpEK,OAAO,SAAApB,GAAC,OAAmD,IAA/C+T,EAA4B5K,QAAQnJ,EAAErB,MAClDmE,KAAK,SAACxJ,EAA2ByJ,GAC9B,IAAMmR,EAASH,EAA4B5K,QAAQ7P,EAAEqF,IAC/CwV,EAASJ,EAA4B5K,QAAQpG,EAAEpE,IACrD,OAAOuV,IAAWC,EAAS,EAAID,EAASC,EAAS,GAAK,IAE9DX,EVuBL,SAAczS,EAAkC4O,EAAyBC,EAAyBuB,GAErG,IAAIiD,EAAiDrT,EAAOtG,IAAI,SAACuF,EAAGtI,GAChE,MAAO,CAAEiH,GAAIqB,EAAErB,GAAI4R,MAAO,CAAEE,OAAQ/Y,EAAG8Y,MAAO,MAkB9C6D,EAHuClD,EAXPpQ,EAAOtG,IAAI,SAAAuF,GAC3C,QAAyBnD,IAArBmD,EAAEkM,gBAAqD,OAArBlM,EAAEkM,eAAyB,CAC7D,IAAItJ,EAAK5C,EAAEkM,eAAgByD,GACvB9M,EAAK7C,EAAEkM,eAAgB0D,GAC3B,MAAO,CAAEjR,GAAIqB,EAAErB,GAAIiE,EAAGA,EAAGC,EAAGA,GAE5B,MAAO,CAAElE,GAAIqB,EAAErB,GAAIiE,EAAG,EAAGC,EAAG,MAQmCpI,IAAI,SAAC0R,EAAIzU,GAC5E,IAAIoU,EAAQsI,EAA6BE,KAAK,SAAAtU,GAAC,OAAIA,EAAErB,KAAOwN,EAAGxN,KAC/D,YAAc9B,IAAViP,EACO1T,OAAAqK,EAAA,EAAArK,CAAA,GAAK0T,EAAZ,CAAmByE,MAAO,CAAEE,OAAQ3E,EAAMyE,MAAME,OAAQD,MAAO9Y,MAE/D6c,QAAQhC,MAAM,kEAAoEpG,EAAGxN,IAC9E,QAEZyC,OAAO,SAACpB,GAAD,OAAyD,OAANA,IAQ7D,OALIqU,EAA2B/c,SAAWyJ,EAAOzJ,QAC7Cid,QAAQhC,MAAM,oEAIX8B,EAA2BvR,KAAK,SAACxJ,EAAGyJ,GAAJ,OAAUzJ,EAAEiX,MAAMC,MAAQzN,EAAEwN,MAAMC,QU5D/C1N,CACdmR,EACAtN,GAA4BsM,EAAarQ,GAAGlI,IAC5CiM,GAA4BsM,EAAapQ,GAAGnI,IAC5C4H,GAAwB6Q,UAG5BK,EAAkB,KAEvB,CAACtL,EAAqB+K,EAAcE,EAAerS,EAAWC,IAEjE,IAAMyT,EAA0BjB,EAAenS,OAAO,SAAApB,GAAC,YAAqBnD,IAAjBkE,EAAOf,EAAErB,MAC9D8V,EAA0CD,EAAwB/Z,IAAI,SAAAuF,GAAC,OAAIe,EAAOf,EAAErB,MACpF+V,EAAwDF,EAAwB/Z,IAAI,SAAAka,GAAQ,OAAOvc,OAAAqK,EAAA,EAAArK,CAAA,GAAK2I,EAAO4T,EAAGhW,IAAQgW,KAsB1HC,EAASvb,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,CAAWyB,UAAU,aAChC1B,EAAAC,EAAAC,cAAA,MAAIwB,UAAU,eAAd,oBACA1B,EAAAC,EAAAC,cAAA,KAAGwB,UAAU,qCAAb,oJAGJ,YAAc8B,IAAVoC,EACO5F,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACFob,EACDvb,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,CAAWyB,UAAU,eACjB1B,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,gHACAF,EAAAC,EAAAC,cAACwF,EAAD,CAA0BzC,KAAMA,MAKrCjD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACFob,EACDvb,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,CAAWyB,UAAU,oBAEjB1B,EAAAC,EAAAC,cAACsb,GAAD,CACI/T,UAAW1I,OAAO+I,OAAOL,GACzBoH,oBAAqBA,EACrBC,2BAA2B,EAC3BC,0BA7FsB,SAAC0M,GAAoE,IAA5CC,EAA4CrO,UAAApP,OAAA,QAAAuF,IAAA6J,UAAA,IAAAA,UAAA,GACnGsM,EAAuB8B,GACvBA,EAAa/U,QAAQ,SAAAyK,GAC+B,IAA5C1J,EAAU0J,GAAanE,UAAU/O,QACjCwb,EAAgBhS,EAAU0J,MAI9BuK,GAA0BpB,GAC1B7T,WAAW,WACoC,OAAvC+T,EAA2BmB,SAC3B9b,OAAO+b,OAAO,CACVzF,IAAKqE,EAA2BmB,QAAQE,wBAAwB1F,IAAMtW,OAAOic,QAAU,GACvFC,SAAU,YAGnB,KAEPxB,GAA0B,MA8ErB1L,EAAoB5Q,OAAS,GAAK+B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KAC/BH,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,OAAOsa,IAAKxB,GACvBxa,EAAAC,EAAAC,cAAC+b,GAAD,CACIxU,UAAWoH,EAAoBzN,IAAI,SAAAgQ,GAAG,OAAIA,KAAO3J,EAAYA,EAAU2J,GAAO,OAAMrJ,OAAO,SAACC,GAAD,OAAqG,OAANA,IAC1L6J,cAAehD,EAAoBzN,IAAI,SAAAgQ,GAAG,OAAIoI,EAAiB0C,IAAI9K,KAAM/R,OAAO,SAACY,EAAGyJ,GAAJ,OAAUzJ,GAAKyJ,OAIvG1J,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,QACX1B,EAAAC,EAAAC,cAACic,GAAD,CACIzU,OAAQ0T,EACRnJ,oBAAqB3E,GAA4BsM,EAAarQ,GAAGlI,IACjE6Q,oBAAqB5E,GAA4BsM,EAAapQ,GAAGnI,IACjEgR,oBAAqB/E,GAA4BsM,EAAarQ,GAAGiE,IACjE8E,oBAAqBhF,GAA4BsM,EAAarQ,GAAGkE,IACjE8E,oBAAqBjF,GAA4BsM,EAAapQ,GAAGgE,IACjEgF,oBAAqBlF,GAA4BsM,EAAarQ,GAAGkE,IACjE0E,qBAAsByH,EAAarQ,EACnC6I,qBAAsBwH,EAAapQ,KAI3CxJ,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,QACX1B,EAAAC,EAAAC,cAACkc,GAAD,CACI7E,yBAA0BxY,OAAOoC,KAAKmM,IAA6BvF,OAAO,SAAAsU,GAAkB,OAAI/O,GAA4B+O,GAAoB3O,eAChJmK,gCAAiC9Y,OAAOoC,KAAK8H,IAC7CqO,gBAAiBsC,EAAarQ,EAC9BmO,gBAAiBkC,EAAapQ,EAC9BoO,wBAAyBkC,EACzBrC,cA3GE,SAAC6E,GAAD,OAAuBzC,EAAgB9a,OAAAqK,EAAA,EAAArK,CAAA,GAAK6a,EAAN,CAAoBrQ,EAAG+S,MA4G/D3E,cA3GE,SAAC2E,GAAD,OAAuBzC,EAAgB9a,OAAAqK,EAAA,EAAArK,CAAA,GAAK6a,EAAN,CAAoBpQ,EAAG8S,MA4G/DvE,mBA3GO,SAACuE,GAAD,OAAuBvC,EAAiBuC,OA+GtDzN,EAAoBzN,IAAI,SAAAgQ,GAAG,OAAIA,KAAO3J,EAAYA,EAAU2J,GAAKpE,UAAU/O,OAAS,IAAGoB,OAAO,SAACY,EAAGyJ,GAAJ,OAAUzJ,EAAIyJ,IAAK,GAAKmF,EAAoBzN,IAAI,SAAAgQ,GAAG,OAAIA,KAAO3J,EAAYA,EAAU2J,GAAK1J,OAAOyD,MAAQ,IAAG9L,OAAO,SAACY,EAAGyJ,GAAJ,OAAUzJ,EAAIyJ,MAAOwQ,EAAejc,QACjP+B,EAAAC,EAAAC,cAAC8V,EAAA/V,EAAD,CAAOqD,QAAQ,UAAUS,MAAO,CAACuN,QAAS,iBAA1C,gEAKJtR,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,QACX1B,EAAAC,EAAAC,cAACqc,GAAD,CACI7U,OAAQ2T,EACR/E,gBAAiBhJ,GAA4BsM,EAAarQ,GAAGlI,IAC7D8Q,qBAAsByH,EAAarQ,EACnCgN,gBAAiBjJ,GAA4BsM,EAAapQ,GAAGnI,IAC7D+Q,qBAAsBwH,EAAapQ,KAI3CxJ,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,QACX1B,EAAAC,EAAAC,cAACsc,GAAD,CAAQvE,SArGP,SAACzM,EAAcC,GAC5B,OAAO,IAAIE,QAAJ,eAAA8Q,EAAA1d,OAAAqN,EAAA,EAAArN,CAAAsN,EAAApM,EAAAqM,KAAY,SAAAoQ,EAAO9Q,EAASC,GAAhB,IAAAH,EAAAmN,EAAA,OAAAxM,EAAApM,EAAAwM,KAAA,SAAAkQ,GAAA,cAAAA,EAAAhQ,KAAAgQ,EAAA/P,MAAA,eACDpJ,IAAVoC,QAA0CpC,IAAnB0W,QAAyC1W,IAATP,EAD5C,CAAA0Z,EAAA/P,KAAA,eAGPlB,EAAuBwO,EAAe9Y,IAAI,SAAAwb,GAAE,OAAIlV,EAAOkV,EAAGtX,IAAIgD,MAHvDqU,EAAA/P,KAAA,EAKkBrB,GAAe3F,EAAMxD,MAAOa,EAAMuI,EAAMC,EAAUC,GAC1EQ,KAAK,SAAAM,GAEF,OADAkN,GAAsB,IACf,GACR,SAAA3M,GAEC,OADAmO,QAAQhC,MAAMnM,IACP,IAXJ,OAKP8L,EALO8D,EAAAE,KAaXjR,EAAQiN,GAbG,OAefjN,GAAQ,GAfO,wBAAA+Q,EAAA1P,SAAAyP,MAAZ,gBAAAI,EAAAC,GAAA,OAAAN,EAAAtP,MAAAC,KAAAC,YAAA,YC3EA2P,GAXmC,SAACvd,GAC/C+I,mBAAS,+BAIT,OAAOxI,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,CAAWyB,UAAU,eACxB1B,EAAAC,EAAAC,cAAA,MAAIwB,UAAU,QAAd,kBACA1B,EAAAC,EAAAC,cAACmD,EAAApD,EAAD,CAAQsD,QAJS,kBAAMV,mBAAS,OAIhC,oBCWOoa,OApBf,WAA8B,IAAAnX,EACIC,mBAASlG,OAAOqd,UAAUC,QAD9BnX,EAAAjH,OAAAkH,EAAA,EAAAlH,CAAA+G,EAAA,GACrBsX,EADqBpX,EAAA,GACXqX,EADWrX,EAAA,GAiB1B,OAdAI,oBAAU,WACN,SAASkX,EAAyBjN,GAC9BgN,EAAYxd,OAAOqd,UAAUC,QAMjC,OAHAtd,OAAO4P,iBAAiB,SAAU6N,GAClCzd,OAAO4P,iBAAiB,UAAW6N,GAE5B,WACHzd,OAAO6P,oBAAoB,SAAU4N,GACrCzd,OAAO6P,oBAAoB,UAAW4N,KAE3C,IAEIF,GCFLG,GAAmB,CACrBta,UAAMO,EACNiE,UAAW,GACXC,OAAQ,GACR8V,cAAe,IAgNJC,GApMqC,SAAChe,GAAkB,IAAAqG,EACzCC,wBAA4BvC,GADawC,EAAAjH,OAAAkH,EAAA,EAAAlH,CAAA+G,EAAA,GAC5DF,EAD4DI,EAAA,GACrD0X,EADqD1X,EAAA,GAAAkJ,EAE7BnJ,mBAAsBwX,IAFOpO,EAAApQ,OAAAkH,EAAA,EAAAlH,CAAAmQ,EAAA,GAE5DyO,EAF4DxO,EAAA,GAE/CyO,EAF+CzO,EAAA,GAAAkJ,EAGXtS,oBAAS,GAHEuS,EAAAvZ,OAAAkH,EAAA,EAAAlH,CAAAsZ,EAAA,GAG5DwF,EAH4DvF,EAAA,GAGtCwF,EAHsCxF,EAAA,GAAA0B,EAInBjU,mBAAsB,IAAIgY,KAJP9D,EAAAlb,OAAAkH,EAAA,EAAAlH,CAAAib,EAAA,GAI5DR,EAJ4DS,EAAA,GAI1C+D,EAJ0C/D,EAAA,GAK7DmD,EAAWH,KAEXtd,EAAgB,SAACse,GAAD,OAAiCP,EAASO,IAC1DpY,EAAW,kBAAMlG,OAAc6D,IAI/BkW,EAAwB,WAA0B,IAAzBwE,IAAyB7Q,UAAApP,OAAA,QAAAuF,IAAA6J,UAAA,KAAAA,UAAA,QACtC7J,IAAVoC,QAA4CpC,IAArBma,EAAY1a,MZxBxC,SAAqC2C,EAAc3C,GAEtD,OAAO,IAAI0I,QAAQ,SAACC,EAASC,GACzB,IAAMC,EAAa,IAAIC,IACvBD,EAAWE,eAAepG,EAAMxD,OAEhC,IAAIqF,EAAmD,GAEjDyD,EAAQL,GAEVsT,GAAW,EAEfrS,EAAWsS,iBAAiBnb,EAAKqC,GAAI,CAAEgG,OALxB,EAKgCJ,UAC1CgB,KADL,eAAAuQ,EAAA1d,OAAAqN,EAAA,EAAArN,CAAAsN,EAAApM,EAAAqM,KACU,SAAAoQ,EAAMhd,GAAN,IAAA0L,EAAAiT,EAAAhgB,EAAAigB,EAAAC,EAAA,OAAAlS,EAAApM,EAAAwM,KAAA,SAAAkQ,GAAA,cAAAA,EAAAhQ,KAAAgQ,EAAA/P,MAAA,OACFnF,EAAS,GAAA3I,OAAAC,OAAAC,EAAA,EAAAD,CAAO0I,GAAP1I,OAAAC,EAAA,EAAAD,CAAqBW,EAAK8e,QAG7BpT,EAAiBH,GAAkBC,EAAOxL,EAAKyL,OAAOsT,OAAO,GAC7DJ,EAAyB3f,EAAU0M,EAAgBJ,IAEhD3M,EAAI,EAPX,YAOcA,EAAIggB,EAAuBpgB,QAPzC,CAAA0e,EAAA/P,KAAA,SAUE,IADI0R,EAA+D,GAC1DC,EAAI,EAAGA,EAAIF,EAAuBhgB,GAAGJ,OAAQsgB,IAClDD,EAAS9X,KAAMsF,EAAWsS,iBAAiBnb,EAAKqC,GAAI+Y,EAAuBhgB,GAAGkgB,KAXpF,OAAA5B,EAAA/P,KAAA,EAcQjB,QAAQ+S,IAAIJ,GACbpS,KAAK,SAAAyS,GAAmBlX,EAAS,GAAA3I,OAAAC,OAAAC,EAAA,EAAAD,CAAO0I,GAAP1I,OAAAC,EAAA,EAAAD,CAAqB4f,EAAcvd,IAAI,SAAA/C,GAAC,OAAIA,EAAEmgB,QAAO7D,WACtF7N,MAAM,SAAAC,GAASlB,EAAOkB,GAAMoR,GAAW,IAhB9C,WAiBMA,EAjBN,CAAAxB,EAAA/P,KAAA,gBAAA+P,EAAAiC,OAAA,oBAOiDvgB,IAPjDse,EAAA/P,KAAA,gBAuBFhB,EAAQnE,EAAUrG,IAAI,SAAA4G,GAAO,OAAOjJ,OAAAqK,EAAA,EAAArK,CAAA,GAAIiJ,EAAX,CAAcgF,UAAW,QAvBpD,yBAAA2P,EAAA1P,SAAAyP,MADV,gBAAAI,GAAA,OAAAL,EAAAtP,MAAAC,KAAAC,YAAA,GA0BO,SAAAN,GACClB,EAAOkB,OYdX8R,CAA4BjZ,EAAO+X,EAAY1a,MAC1CiJ,KAAK,SAAAzE,GAEFmW,EAAe,SAAAkB,GAAS,OAAA/f,OAAAqK,EAAA,EAAArK,CAAA,GACjB+f,EADiB,CAEpBrX,UAAU1I,OAAAqK,EAAA,EAAArK,CAAA,GAAMG,EAAoDuI,EAAUrG,IAAI,SAAA4G,GAAC,OAAIA,EAAE1C,MAAMwZ,EAAUrX,YAAcyW,EAAhCnf,OAAAqK,EAAA,EAAArK,CAAA,GAA4CiJ,EAA5C,CAA+CgF,UAAW8R,EAAUrX,UAAUO,EAAE1C,IAAI0H,YAAchF,IAAI,aAGpM8E,MAAM,SAAAC,GAAG,OAAI+L,IAAUI,MACpB,0GACA,CAAEhD,SAAU,gBAAiB6C,QAAS,gCAAiCC,UAAW,GAAIzV,QAAS,SAAC0V,GAAD,OAAeA,UAKxHQ,EAAkB,SAACjN,QACPhJ,IAAVoC,GAAwB4T,EAAiB0C,IAAI1P,EAASlH,MACtD0Y,EAAoB,SAAAc,GAAS,OAAI,IAAIf,IAAJ,GAAAjf,OAAAC,OAAAC,EAAA,EAAAD,CAAaggB,MAAMC,KAAKF,IAAxB,CAAoCtS,EAASlH,QZEnF,SAAgCM,EAAc4G,GAEjD,OAAO,IAAIb,QAAQ,SAACC,EAASC,GACzB,IAAMC,EAAa,IAAIC,IACvBD,EAAWE,eAAepG,EAAMxD,OAEhC,IAAIsF,EAAuC,GAErCwD,EAAQJ,GAEVqT,GAAW,EAEfrS,EAAWmT,kBAAkBzS,EAASlH,GAAI,CAAEgG,OAL7B,EAKqCJ,UAC/CgB,KADL,eAAAgT,EAAAngB,OAAAqN,EAAA,EAAArN,CAAAsN,EAAApM,EAAAqM,KACU,SAAA6S,EAAMzf,GAAN,IAAA0L,EAAAiT,EAAAhgB,EAAAigB,EAAAC,EAAA,OAAAlS,EAAApM,EAAAwM,KAAA,SAAA2S,GAAA,cAAAA,EAAAzS,KAAAyS,EAAAxS,MAAA,OACFlF,EAAM,GAAA5I,OAAAC,OAAAC,EAAA,EAAAD,CAAO2I,GAAP3I,OAAAC,EAAA,EAAAD,CAAkBW,EAAK8e,MAAMpd,IAAI,SAAA/C,GAAC,OAAIA,EAAEoU,UAGxCrH,EAAiBH,GAAkBC,EAAOxL,EAAKyL,OAAOsT,OAAO,GAC7DJ,EAAyB3f,EAAU0M,EAAgBJ,IAEhD3M,EAAI,EAPX,YAOcA,EAAIggB,EAAuBpgB,QAPzC,CAAAmhB,EAAAxS,KAAA,SAUE,IADI0R,EAAwD,GACnDC,EAAI,EAAGA,EAAIF,EAAuBhgB,GAAGJ,OAAQsgB,IAClDD,EAAS9X,KAAMsF,EAAWmT,kBAAkBzS,EAASlH,GAAI+Y,EAAuBhgB,GAAGkgB,KAXzF,OAAAa,EAAAxS,KAAA,EAcQjB,QAAQ+S,IAAIJ,GACbpS,KAAK,SAAAmT,GAAgB3X,EAAM,GAAA5I,OAAAC,OAAAC,EAAA,EAAAD,CAAO2I,GAAP3I,OAAAC,EAAA,EAAAD,CAAkBsgB,EAAWje,IAAI,SAAA/C,GAAC,OAAIA,EAAEmgB,QAAO7D,OAAOvZ,IAAI,SAAA/C,GAAC,OAAIA,EAAEoU,YAC5F3F,MAAM,SAAAC,GAASlB,EAAOkB,GAAMoR,GAAW,IAhB9C,WAiBMA,EAjBN,CAAAiB,EAAAxS,KAAA,gBAAAwS,EAAAR,OAAA,oBAOiDvgB,IAPjD+gB,EAAAxS,KAAA,gBAsBFhB,EAAQlE,EAAOtG,IAAI,SAAAuF,GAAO,OAAO5H,OAAAqK,EAAA,EAAArK,CAAA,GAAK4H,EAAZ,CAAekM,oBAAgBrP,OAtBvD,yBAAA4b,EAAAnS,SAAAkS,MADV,gBAAApC,GAAA,OAAAmC,EAAA/R,MAAAC,KAAAC,YAAA,GAyBO,SAAAN,GACClB,EAAOkB,OYvCXuS,CAAuB1Z,EAAO4G,GACzBN,KAAK,SAAAxE,GACFkW,EAAe,SAAAkB,GACX,IAAMS,EAAmB7X,EAAOK,OAAO,SAAApB,GAAC,OAAgC,IAA5B5H,OAAO+I,OAAOnB,GAAG1I,SACzDyJ,EAAOzJ,SAAWshB,EAAiBthB,QACnC6a,IAAU0G,KAAV,0BAAA1gB,OAC8B4I,EAAOzJ,OAASshB,EAAiBthB,OAD/D,mBAAAa,OACuF0N,EAAShB,KADhG,4EAEI,CAAE0K,SAAU,gBAAiB6C,QAAS,yBAA0BC,UAAW,GAAIzV,QAAS,SAAC0V,GAAD,OAAeA,OAG/G,IAAMoG,EAAaE,EAAiBxX,OAAO,SAAApB,GAAC,QAAMA,EAAErB,MAAMwZ,EAAUpX,UACpE,OAAO3I,OAAAqK,EAAA,EAAArK,CAAA,GACJ+f,EADH,CAEApX,OAAO3I,OAAAqK,EAAA,EAAArK,CAAA,GAAM+f,EAAUpX,OAAWxI,EAAsCmgB,EAAY,OACpF5X,UAAU1I,OAAAqK,EAAA,EAAArK,CAAA,GACH+f,EAAUrX,UADR1I,OAAA0gB,EAAA,EAAA1gB,CAAA,GAEJyN,EAASlH,GAFLvG,OAAAqK,EAAA,EAAArK,CAAA,GAEe+f,EAAUrX,UAAU+E,EAASlH,IAF5C,CAEiD0H,UAAWtF,EAAOtG,IAAI,SAAAuF,GAAC,OAAIA,EAAErB,eAI9FwH,MAAM,SAAAC,GAAG,OAAI+L,IAAUI,MAAV,yCAAApa,OAC+B0N,EAAShB,KADxC,gFAEV,CAAE0K,SAAU,gBAAiB6C,QAAS,uCAAyCC,UAAW,GAAIzV,QAAS,SAAC0V,GAAD,OAAeA,SAEzHyG,QAAQ,kBAAM1B,EAAoB,SAAAc,GAC/B,IAAMa,EAA0B,IAAI5B,IAAIe,GAExC,OADAa,EAAwBC,OAAOpT,EAASlH,IACjCqa,QAKvBvZ,oBAAU,WACN,IAAIyZ,EAA6Bxf,aAAa6B,QApF9B,kBAqFhB,GAAoB,OAAhB2d,EACA,IACI,IAAMC,EAA+BC,KAAKC,MAAMH,GAChDC,EAAmBla,MAAMnD,OAAS,IAAIH,KAAKwd,EAAmBla,MAAMnD,QAvF7D,IAwFHqd,EAAmBG,SAA8BH,EAAmBla,MAAMnD,OAAS,IAAIH,OACvFob,EAASoC,EAAmBla,OAC5BgY,EAAe7e,OAAAqK,EAAA,EAAArK,CAAA,GAAKwe,GAAN,CAAwBta,KAAM6c,EAAmB7c,KAAMwE,UAAWqY,EAAmBrY,aACnGiS,KAEN,MAAOR,GACLgC,QAAQhC,MAAM,4CAGvB,IAEH9S,oBAAU,WACN,QAAc5C,IAAVoC,EAAqB,CACrB,IAAIsa,EAA0B,CAC1BD,QAtGO,EAuGPra,MAAOA,EACP3C,KAAM0a,EAAY1a,KAClBwE,UAAWvI,EAAoDH,OAAO+I,OAAO6V,EAAYlW,WAAWrG,IAAI,SAAA4G,GAAO,OAAOjJ,OAAAqK,EAAA,EAAArK,CAAA,GAAKiJ,EAAZ,CAAegF,UAAW,OAAQ,OAErJ3M,aAAaC,QA5GD,iBA4G0Byf,KAAKI,UAAUD,SAErD7f,aAAa8B,WA9GD,mBAgHjB,CAACyD,EAAO+X,EAAY1a,KAAM0a,EAAYlW,YAEzCrB,oBAAU,WACN,QAAc5C,IAAVoC,EACAgY,EAAe,SAAAkB,GAAS,OAAA/f,OAAAqK,EAAA,EAAArK,CAAA,GAAU+f,EAAV,CAAqB7b,UAAMO,UAChD,CACH,IAAMsI,EAAa,IAAIC,IACvBD,EAAWE,eAAepG,EAAMxD,OAChC0J,EAAWsU,QACNlU,KAAK,SAAAjJ,QACuBO,IAArBma,EAAY1a,KACZ2a,EAAe,SAAAkB,GAAS,OAAA/f,OAAAqK,EAAA,EAAArK,CAAA,GAAU+f,EAAV,CAAqBrX,UAAW,GAAIxE,KAAMA,MAC3D0a,EAAY1a,KAAKqC,KAAOrC,EAAKqC,GACpCsY,EAAe,SAAAkB,GAAS,OAAA/f,OAAAqK,EAAA,EAAArK,CAAA,GAAU+f,EAAV,CAAqBrX,UAAW,GAAIxE,KAAMA,MAElE2a,EAAe,SAAAkB,GAAS,OAAA/f,OAAAqK,EAAA,EAAArK,CAAA,GAAU+f,EAAV,CAAqB7b,KAAMA,QAG1D6J,MAAM,SAAAC,GAAG,OAAI+L,IAAUI,MACpB,wGACA,CAAEhD,SAAU,gBAAiB6C,QAAS,mCAAoCC,UAAW,GAAIzV,QAAS,SAAC0V,GAAD,OAAeA,WAG9H,CAACrT,IAEJQ,oBAAU,gBACmB5C,IAArBma,EAAY1a,KACZ2a,EAAe,SAAAkB,GAAS,OAAA/f,OAAAqK,EAAA,EAAArK,CAAA,GAAU+f,EAAV,CAAqBrX,UAAW,OAExDiS,KAEL,CAACiE,EAAY1a,OAEhBmD,oBAAU,WACN,IAAMia,EAA6CthB,OAAO+I,OAAO6V,EAAYjW,QACxEK,OAAO,SAAApB,GAAC,YAAyBnD,IAArBmD,EAAEkM,iBACdzR,IAAI,SAAAuF,GAAC,OAAIA,EAAErB,UAEF9B,IAAVoC,GAAuBya,EAAiCpiB,OAAS,GZvDtE,SAAmC2H,EAAcoH,GAEpD,OAAO,IAAIrB,QAAJ,eAAA2U,EAAAvhB,OAAAqN,EAAA,EAAArN,CAAAsN,EAAApM,EAAAqM,KAAY,SAAAiU,EAAO3U,EAASC,GAAhB,IAAAC,EAAA0U,EAAAC,EAAAC,EAAAvC,EAAA9f,EAAAigB,EAAAC,EAAA,OAAAlS,EAAApM,EAAAwM,KAAA,SAAAkU,GAAA,cAAAA,EAAAhU,KAAAgU,EAAA/T,MAAA,QACTd,EAAa,IAAIC,KACZC,eAAepG,EAAMxD,OAE5Boe,EAA6C,GAC3CC,EAAe/hB,EAAUsO,EAAWjC,IACpC2V,EAAuBhiB,EAAU+hB,EAAczV,IAEjDmT,GAAW,EAEN9f,EAAI,EAVE,YAUCA,EAAIqiB,EAAqBziB,QAV1B,CAAA0iB,EAAA/T,KAAA,SAaX,IADI0R,EAAgE,GAC3DC,EAAI,EAAGA,EAAImC,EAAqBriB,GAAGJ,OAAQsgB,IAChDD,EAAS9X,KAAMsF,EAAW8U,0BAA0BF,EAAqBriB,GAAGkgB,KAdrE,OAAAoC,EAAA/T,KAAA,GAiBLjB,QAAQ+S,IAAIJ,GACbpS,KAAK,SAAA2U,GAAkBL,EAAQ,GAAA1hB,OAAAC,OAAAC,EAAA,EAAAD,CAAOyhB,GAAPzhB,OAAAC,EAAA,EAAAD,CAAoB8hB,EAAazf,IAAI,SAAA/C,GAAC,OAAIA,EAAEwU,iBAAgB8H,WAC3F7N,MAAM,SAAAC,GAASlB,EAAOkB,GAAMoR,GAAW,IAnBjC,YAoBPA,EApBO,CAAAwC,EAAA/T,KAAA,gBAAA+T,EAAA/B,OAAA,oBAUkCvgB,IAVlCsiB,EAAA/T,KAAA,gBA4BfhB,EAAQ4U,GA5BO,yBAAAG,EAAA1T,SAAAsT,MAAZ,gBAAAO,EAAAC,GAAA,OAAAT,EAAAnT,MAAAC,KAAAC,YAAA,IYsDCuT,CAA0Bhb,EAAOya,GAC5BnU,KAAK,SAAC2G,GAEH,IAAMmO,EAA6B9hB,EAA8C2T,EAAe9K,OAAO,SAACkZ,GAAD,OAAqD,OAAPA,IAAc,MAC7JC,EAA2Db,EAAiCjf,IAAI,SAAA+f,GAAG,OAAApiB,OAAAqK,EAAA,EAAArK,CAAA,GAClG4e,EAAYjW,OAAOyZ,GAD+E,CAErGtO,eAAgBsO,KAAOH,EAA6BA,EAA2BG,GAAO,SAIpFC,EAA4BF,EAA+BnZ,OAAO,SAAApB,GAAC,OAAyB,OAArBA,EAAEkM,iBAC3EuO,EAA0BnjB,OAAS,GACnCid,QAAQsE,KAAR,iCAAA1gB,OAA8CsiB,EAA0BhgB,IAAI,SAAAuF,GAAC,OAAIA,EAAErB,KAAI/D,KAAK,QAGhGqc,EAAe,SAAAkB,GAAS,OAAA/f,OAAAqK,EAAA,EAAArK,CAAA,GACjB+f,EADiB,CAEpBpX,OAAO3I,OAAAqK,EAAA,EAAArK,CAAA,GAAM+f,EAAUpX,OAAWxI,EAAsCgiB,EAAgC,aAG/GpU,MAAM,SAAAC,GAAG,OAAI+L,IAAUI,MACpB,yHACA,CAAEhD,SAAU,gBAAiB6C,QAAS,0CAA2CC,UAAW,GAAIzV,QAAS,SAAC0V,GAAD,OAAeA,UAGrI,CAAC0E,EAAYjW,SAEhBtB,oBAAU,WACDgX,GACDtE,IAAU0G,KACN,mHACA,CAAEtJ,SAAU,gBAAiB6C,QAAS,UAAWC,UAAW,GAAIzV,QAAS,SAAC0V,GAAD,OAAeA,QAGjG,CAACmE,IAEJ,IAAMiE,EAAS,CACXjd,IAAK,kBAAMpE,EAAAC,EAAAC,cAACohB,EAAD,OACXC,yBAA0B,kBAAMvhB,EAAAC,EAAAC,cAACshB,EAAD,CAAsB7hB,cAAeA,KACrE8hB,0BAA2B,kBAAMzhB,EAAAC,EAAAC,cAACshB,EAAD,CAAsB7hB,cAAeA,KACtE0E,QAAS,kBAAMrE,EAAAC,EAAAC,cAACwhB,GAAD,CAAM9b,MAAOA,EAAO3C,KAAM0a,EAAY1a,KAAMwE,UAAWkW,EAAYlW,UAAWC,OAAQiW,EAAYjW,OAAQ8R,iBAAkBA,EAAkBC,gBAAiBA,EAAiBC,sBAAuBA,KACtNpV,SAAU,kBAAMtE,EAAAC,EAAAC,cAACyhB,EAAD,QAEdC,EAAcC,oBAAUR,GAI9B,OAHAS,sBAAY,SAAU,SACtBA,sBAAY,UAAW,UAEhB9hB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACHH,EAAAC,EAAAC,cAAC6hB,EAAD,CAAqBnc,MAAOA,EAAOC,SAAUA,SAClCrC,IAAVoC,QAA4CpC,IAArBma,EAAY1a,MAAsB4a,GACtD7d,EAAAC,EAAAC,cAAC8hB,EAAD,CACIpc,MAAOA,EACP3C,KAAM0a,EAAY1a,KAClBwE,UAAWkW,EAAYlW,UACvBC,OAAQiW,EAAYjW,OACpBC,QAjLkB,kBAAMmW,GAAwB,IAkLhDjY,SAAUA,IAGlB7F,EAAAC,EAAAC,cAAC+hB,EAAD,CAAYhf,KAAM0a,EAAY1a,KAAMuB,0BAtLX,kBAAMsZ,GAAwB,MAuLtD8D,GAAe5hB,EAAAC,EAAAC,cAACgiB,GAAD,QCxNJC,QACW,cAA7BtiB,OAAOC,SAASsiB,UAEe,UAA7BviB,OAAOC,SAASsiB,UAEhBviB,OAAOC,SAASsiB,SAASC,MACvB,2DCZNC,IAASC,OAAOviB,EAAAC,EAAAC,cAACsiB,GAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBxF,WACrBA,UAAUyF,cAAcC,MAAM1W,KAAK,SAAA2W,GACjCA,EAAaC,mCE3InBC,EAAAC,QAAiBC,EAAAjb,EAAuB,0PCAxC+a,EAAAC,QAAiBC,EAAAjb,EAAuB,mECAxC+a,EAAAC,QAAiBC,EAAAjb,EAAuB","file":"static/js/main.eca70038.chunk.js","sourcesContent":["// Convert an object to a query string\r\nexport function encodeData(data: any): string {\r\n    return Object.keys(data).map(function (key) {\r\n        return [key, data[key]].map(encodeURIComponent).join(\"=\");\r\n    }).join(\"&\");\r\n}\r\n\r\n// Create a random string (src: https://stackoverflow.com/a/1349426)\r\nexport function randomString(length: number): string {\r\n    let result = '';\r\n    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    let charactersLength = characters.length;\r\n    for (let i = 0; i < length; i++) {\r\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return result;\r\n}\r\n\r\n// Turn a list into lists of lists with each top level list holding a max of `chunk_amount` lists\r\nexport function chunkList<T>(list: T[], chunk_amount: number): T[][] {\r\n    let chunks: T[][] = [];\r\n    for (let i = 0; i < list.length; i += chunk_amount) {\r\n        chunks = [...chunks, list.slice(i, i+chunk_amount)]\r\n    }\r\n    return chunks;\r\n}\r\n\r\n// Convert an array to an object using a provided key (src: https://medium.com/dailyjs/rewriting-javascript-converting-an-array-of-objects-to-an-object-ec579cafbfc7)\r\nexport function arrayToObject<T>(array: T[], keyField: keyof T): {[key: string]: T} {\r\n    return array.reduce((obj: any, item: any) => {\r\n        obj[item[keyField]] = item;\r\n        return obj;\r\n    }, {});\r\n}\r\n","import React from 'react';\r\nimport { navigate } from 'hookrouter';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport settings from '../../settings.json';\r\nimport { encodeData, randomString } from '../../logic/Utils';\r\nimport { Token } from '../../models/Spotify';\r\n\r\n// Based off https://developer.spotify.com/documentation/general/guides/authorization-guide/#implicit-grant-flow\r\n\r\nconst localStorageStateKey = 'spotify-auth-random-state';\r\nexport const localStorageRedirectKey = 'auth-local-redirect';\r\n\r\ninterface IProps {\r\n    onTokenChange: (newToken: Token | undefined) => void,\r\n}\r\n\r\nconst SpotifyAuthorization: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    const { onTokenChange } = props;\r\n    const { hash } = window.location;\r\n\r\n    const redirectOut = () => {\r\n        let local_redirect: string | null = localStorage.getItem(localStorageRedirectKey);\r\n        if (local_redirect === null) {\r\n            navigate('/');\r\n        } else {\r\n            localStorage.removeItem(localStorageRedirectKey);\r\n            navigate(local_redirect);\r\n        }\r\n    }\r\n    \r\n    const onTokenRecieved = (value: string, expires_in: number) => {\r\n        let expiryDate = new Date();\r\n        expiryDate.setSeconds(expiryDate.getSeconds() + expires_in);\r\n        onTokenChange({ value: value, expiry: expiryDate });\r\n    };\r\n\r\n    let message = <></>;\r\n\r\n    if (hash === '') { // No token in URL, redirect user to request for one\r\n        // Setup random state\r\n        const random_state = randomString(16);\r\n        localStorage.setItem(localStorageStateKey, random_state);\r\n        // Redirect\r\n        const url_parameters = {\r\n            'client_id': settings.spotify_client_id,\r\n            'response_type': 'token',\r\n            'redirect_uri': window.location.href,\r\n            'state': random_state,\r\n            'scope': settings.spotify_premission_scope,\r\n            'show_dialog': true,\r\n        }\r\n        const url_parameters_encoded = encodeData(url_parameters);\r\n        window.location.href = 'https://accounts.spotify.com/authorize?' + url_parameters_encoded;\r\n        message = <>\r\n            <Spinner animation=\"border\" />\r\n            <p className=\"lead\">Requesting token, you will be redirected to Spotify</p>\r\n        </>;\r\n\r\n    } else { // We have recieved the token, read it from the URL\r\n        const params = new URLSearchParams(hash.substr(1));\r\n        const access_token = params.get('access_token');\r\n        const expires_in = params.get('expires_in');\r\n        const state = params.get('state');\r\n\r\n        if (access_token !== null && expires_in !== null && state !== null) { // All parameters are present\r\n            const stored_random_state = localStorage.getItem(localStorageStateKey);\r\n            \r\n            if (stored_random_state !== null && stored_random_state === state) { // Random state was set and matches\r\n                localStorage.removeItem(localStorageStateKey);\r\n                onTokenRecieved(access_token, parseInt(expires_in));\r\n                redirectOut();\r\n                message = <>\r\n                    <Spinner animation=\"border\" />\r\n                    <p className=\"lead\">Recieved token</p>\r\n                </>;\r\n\r\n            } else { // Token recieved but it does not match the state stored (if there was one)\r\n                message = <p className=\"lead\">Token not requested by this application</p>;\r\n            }\r\n            \r\n        } else {\r\n            message = <p className=\"lead\">Incorrect URL parameters</p>;\r\n        }\r\n    }\r\n\r\n    return <Container className=\"text-center\">\r\n        <h1>Spotify Authorization</h1>\r\n        {message}\r\n    </Container>;\r\n}\r\n\r\nexport default SpotifyAuthorization;\r\n","import React from 'react';\r\nimport { navigate, usePath } from 'hookrouter';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { localStorageRedirectKey } from '../pages/SpotifyAuthorization';\r\nimport SpotifyLogoRound from '../img/spotify-logo-round.png';\r\n\r\ninterface IProps {\r\n    user: SpotifyApi.CurrentUsersProfileResponse | undefined,\r\n    onLoggedInClick?: () => void\r\n}\r\n\r\nconst SpotifyLoginStatusButton: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    const { user, onLoggedInClick } = props;\r\n\r\n    const path = usePath();\r\n\r\n    const loggedInStatusButtonClick = () => {\r\n        if (user === undefined) {\r\n            localStorage.setItem(localStorageRedirectKey, path);\r\n            navigate('/spotify-authorization');\r\n        } else {\r\n            if (onLoggedInClick) {\r\n                onLoggedInClick();\r\n            }\r\n        }\r\n    }\r\n\r\n    return <Button variant=\"outline-secondary\" onClick={loggedInStatusButtonClick}>\r\n        <img\r\n            src={\r\n                user !== undefined && user.images !== undefined && user.images.length > 0\r\n                    ? user.images[0].url\r\n                    : SpotifyLogoRound\r\n            }\r\n            alt={\r\n                user !== undefined && user.images !== undefined && user.images.length > 0\r\n                    ? user.display_name + ' Logo'\r\n                    : 'Spotify Logo Round'\r\n            }\r\n            style={{ height: 20, width: 20, borderRadius: '50%' }}\r\n            className=\"mr-2\"\r\n        />\r\n        {\r\n            user !== undefined\r\n                ? user.display_name\r\n                : 'Sign In With Spotify'\r\n        }\r\n    </Button>;\r\n}\r\n\r\nexport default SpotifyLoginStatusButton;\r\n","import React from 'react';\r\nimport { navigate, usePath } from 'hookrouter';\r\nimport banner from '../img/banner.png';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Container from 'react-bootstrap/Container';\r\nimport SpotifyLoginStatusButton from './SpotifyLoginStatusButton';\r\n\r\ninterface IProps {\r\n  user: SpotifyApi.CurrentUsersProfileResponse | undefined,\r\n  onAuthButtonLoggedInClick: () => void\r\n}\r\n\r\nconst navbarLinks: {[key: string]: string} = {\r\n  '/' : 'Home',\r\n  '/sort' : 'Sort',\r\n  '/about' : 'About',\r\n};\r\n\r\nconst Navigation: React.FunctionComponent<IProps> = (props: IProps) => {\r\n  const { user } = props;\r\n  const { onAuthButtonLoggedInClick } = props;\r\n\r\n  const currentPath = usePath();\r\n\r\n  const goTo = (location: string) => () => navigate(location);\r\n\r\n  return <Navbar collapseOnSelect expand=\"sm\" bg=\"light\" variant=\"light\" sticky=\"top\">\r\n    <Container>\r\n      <Navbar.Brand onClick={goTo('/')}>\r\n        <img\r\n          src={banner}\r\n          height=\"30\"\r\n          className=\"d-inline-block align-top\"\r\n          alt=\"Emotionify Banner Logo\"\r\n          style={{ cursor: 'pointer' }}\r\n        />\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n          {Object.keys(navbarLinks).map(path => \r\n            <Nav.Link key={path} href=\"#\" onClick={goTo(path)} active={currentPath === path}>{navbarLinks[path]}</Nav.Link>\r\n          )}\r\n        </Nav>\r\n        <Nav>\r\n          <SpotifyLoginStatusButton user={user} onLoggedInClick={onAuthButtonLoggedInClick} />\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Container>\r\n  </Navbar>;\r\n}\r\n\r\nexport default Navigation;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { navigate } from 'hookrouter';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { Token } from '../models/Spotify';\r\n\r\ninterface IProps {\r\n    token: Token | undefined,\r\n    onLogOut: () => void\r\n}\r\n\r\nconst warningMilliseconds = 5 * 60 * 1000;\r\n\r\nconst TokenRefreshWarning: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    const { token } = props;\r\n    const { onLogOut } = props;\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const timers: NodeJS.Timeout[] = [];\r\n        if (token !== undefined) {\r\n            const milliseconds_left = token.expiry.getTime() - new Date().getTime();\r\n            if (warningMilliseconds < milliseconds_left) { // If there is more than the warning time left\r\n                timers.push(setTimeout(() => { // Setup warning\r\n                    setOpen(true);\r\n                }, milliseconds_left - warningMilliseconds));\r\n                timers.push(setTimeout(() => { // Setup token expired\r\n                    setOpen(true);\r\n                }, milliseconds_left));\r\n            } else if (milliseconds_left > 0) { // If there is time left\r\n                timers.push(setTimeout(() => { // Setup token expired\r\n                    setOpen(true);\r\n                }, milliseconds_left));\r\n                setOpen(true); // Show\r\n            } else { // If there is no time left\r\n                setOpen(true); // Show\r\n            }\r\n        }\r\n\r\n        return () => timers.forEach(t => clearTimeout(t));\r\n    }, [token]);\r\n\r\n    const refreshClick = () => {\r\n        onLogOut();\r\n        navigate('/spotify-authorization');\r\n    };\r\n    const cancelClick = () => setOpen(false);\r\n\r\n    if (token !== undefined && open) {\r\n        const expired: boolean = token.expiry.getTime() - new Date().getTime() <= 0;\r\n\r\n        return <Modal show={open} onHide={cancelClick}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>\r\n                    {expired\r\n                        ? 'Spotify Token Expired'\r\n                        : 'Spotify Token Refresh Warning'\r\n                    }\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n                <Modal.Body>\r\n                    {expired\r\n                        ? <>\r\n                            Your Spotify token has now expired and we can no longer access your data; sign back in with Spotify to get an new token.\r\n                            <br />\r\n                            We will leave you logged in here so you can still view your data but we will not be able to get data from Spotify for you.\r\n                        </>\r\n                        : <>\r\n                            Since Spotify issues client side tokens for upto an hour, you will need a new token soon. Your current token expires at {token.expiry.toLocaleTimeString()}.\r\n                            <br />\r\n                            To do this, we'll send you back to the Spotify authorization page again to get a new token.\r\n                        </>\r\n                    }\r\n                </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={cancelClick}>Close</Button>\r\n                <Button variant=\"primary\" onClick={refreshClick}>Refresh Token</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    } else {\r\n        return <></>;\r\n    }\r\n}\r\n\r\nexport default TokenRefreshWarning;\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { Token, PlaylistObjectSimplifiedWithTrackIds, TrackWithAudioFeatures } from '../models/Spotify';\r\n\r\ninterface IProps {\r\n    token: Token,\r\n    user: SpotifyApi.UserObjectPrivate,\r\n    playlists: { [key: string]: PlaylistObjectSimplifiedWithTrackIds },\r\n    tracks: { [key: string]: TrackWithAudioFeatures },\r\n    onClose: () => void,\r\n    onLogOut: () => void\r\n}\r\n\r\nconst StoredDataDialog: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    const { token, user, playlists, tracks } = props;\r\n    const { onClose, onLogOut } = props;\r\n\r\n    const tokenStub = token.value.substr(0, 10) + '.....' + token.value.substr(token.value.length - 10, token.value.length);\r\n    const publicPlaylistCount = Object.values(playlists).filter(p => p.public).length;\r\n    const privatePlaylistCount = Object.values(playlists).filter(p => !p.public).length;\r\n    const tracksStored = Object.values(tracks).length;\r\n\r\n    return <Modal show={true} onHide={onClose}>\r\n        <Modal.Header closeButton>\r\n            <Modal.Title>{user.display_name}</Modal.Title>\r\n        </Modal.Header>\r\n            <Modal.Body>\r\n                Data currently stored:\r\n                <ul style={{ marginBottom: 0 }}>\r\n                    <li title={tokenStub}>Token expires at: <code>{token.expiry.toLocaleTimeString()}</code></li>\r\n                    <li title={user.uri}>User associated: <code>{user.display_name}</code></li>\r\n                    <li>Playlists stored: <code>{publicPlaylistCount} public and {privatePlaylistCount} private</code></li>\r\n                    <li>Tracks stored (with audio features): <code>{tracksStored}</code></li>\r\n                </ul>\r\n            </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button variant=\"outline-secondary\" onClick={onClose}>Close</Button>\r\n            <Button variant=\"outline-secondary\" onClick={onLogOut}>Logout</Button>\r\n        </Modal.Footer>\r\n    </Modal>;\r\n}\r\n\r\nexport default StoredDataDialog;\r\n","import React from 'react';\r\nimport { navigate, useTitle } from 'hookrouter';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Button from 'react-bootstrap/Button';\r\nimport SortComparisonImage from '../../img/sort-comparison.png';\r\nimport BannerImage from '../../img/banner.png';\r\n\r\ninterface IProps { }\r\n\r\nconst Home: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    useTitle('Emotionify');\r\n\r\n    const goToSort = () => navigate('/sort');\r\n\r\n    return <>\r\n        <section className=\"jumbotron jumbotron-fluid text-center\">\r\n            <Container>\r\n                <h1 className=\"sr-only\">Emotionify</h1>\r\n                <img src={BannerImage} className=\"mb-2\" style={{ width: 800, maxWidth: '100%' }} alt=\"Emotionify Banner Logo\" />\r\n                <p className=\"lead col-md-7 mt-2 mx-auto\">Easily create emotionally gradiented Spotify playlists for smoother emotional transitions in your listening</p>\r\n            </Container>\r\n        </section>\r\n        \r\n        <section>\r\n            <Container style={{ textAlign: 'center', marginBottom: 40 }}>\r\n                <h2>Sort Your Playlist</h2>\r\n                <img src={SortComparisonImage} alt=\"Emotionify Sort Comparison\" style={{ maxWidth: '100%', width: 900 }} />\r\n                <div style={{ maxWidth: 800, margin: '30px auto' }}>\r\n                    <p className=\"lead\">Using features calculated by Spotify for each song, sort your playlist on an emotional gradient.</p>\r\n                    <p className=\"lead\">You can also change how and what your songs are sorted by to explore different methods of sorting playlists and discover new ways to listen to your playlists.</p>\r\n                </div>\r\n                <Button variant=\"outline-dark\" onClick={goToSort}>Sort My Playlist &rarr;</Button>\r\n            </Container>\r\n        </section>\r\n    </>\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { useTitle } from 'hookrouter';\r\n\r\ninterface IProps { }\r\n\r\nconst About: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    useTitle('Emotionify - About');\r\n\r\n    return <Container>\r\n        <Row className=\"justify-content-md-center\">\r\n            <Col className=\"col-md-10 col-lg-8\">\r\n                <h1 className=\"text-center\">About</h1>\r\n                <p>Emotionify is application I had though about for a few years after doing a project at university on attempting to detect emotion in music and portraying it in an interactive environment.</p>\r\n                <p>By default, chosing a playlist on the Sort page will sort your music by <code>Valence</code> and <code>Energy</code> which are <a href=\"https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-features/\">audio features calculated by Spotify</a>. When conducting research for my project, this is was the some of the best public and easily accessible data that related to emotion in music. Also with Spotify being so large and active among many people, it allows for people to easily organise thier own playlists.</p>\r\n                <p>Emotionify is not 100% accurate as emotion is highly opinion based and the values used to sort songs are averages over the whole song. This tool however does give insight on how well a computer can plot an emotional gradient with a list of songs.</p>\r\n                <p>I made this project because I was curious if this data really did mean anything and if my guess of the data being able to be used to sort playlists by emotion was correct. I can leave that up to you to decide!</p>\r\n                <p>As you can see on the Sort page, I have also made the other audio features avaiable for you to play around with.</p>\r\n\r\n                <h2 className=\"text-center\">Stored Data</h2>\r\n                <p>I am fully tranparent with the data that is stored here and what is done with it. None of your data is sent off this site and when stored, it stored in local storage.</p>\r\n                <p>To view a summary of the stored data, simply click your name in the top right. To clear this data, simply logout using the same dialog that appears.</p>\r\n\r\n                <h2 className=\"text-center\">FAQ</h2>\r\n                <h5>Why is this a thing?</h5>\r\n                <p>I was curious.</p>\r\n                <h5>Will this remove duplicates?</h5>\r\n                <p>Yes, if this tool didn't then the duplicate songs would be bunched up by each other. Removing these allows for proper transitions into a different song.</p>\r\n                <h5>How do I clear all my data?</h5>\r\n                <p>All data is stored in localStorage on your machine; simply logging out will clear all this data.</p>\r\n                <h5>What are each of the audio features I select for the axis?</h5>\r\n                <p>Here are some summaries from <a href=\"https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-features/\">Spotify</a>:</p>\r\n                <ul>\r\n                    <li><code>Acousticness</code>: A confidence measure from 0 to 1 of whether the track is acoustic. 1 represents high confidence the track is acoustic.</li>\r\n                    <li><code>Danceability</code>: Danceability describes how suitable a track is for dancing based on a combination of musical elements. A value of 0 is least danceable and 1 is most danceable.</li>\r\n                    <li><code>Duration</code>: The duration of the track in milliseconds.</li>\r\n                    <li><code>Energy</code>: Energy is a measure from 0 to 1 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale.</li>\r\n                    <li><code>Instrumentalness</code>: Predicts whether a track contains no vocals. The closer the instrumentalness value is to 1, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.</li>\r\n                    <li><code>Key</code>: The estimated overall key of the track. (-1 if no key is detected)</li>\r\n                    <li><code>Liveness</code>: Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.</li>\r\n                    <li><code>Loudness</code>: The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Values typical range between -60 and 0 db.</li>\r\n                    <li><code>Mode</code>: Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.</li>\r\n                    <li><code>Speechiness</code>: Speechiness detects the presence of spoken words in a track. Talk shows and audio books are closer to 1, songs made entirely of spoken words are above 0.66, songs that contain both music and speech are typically around 0.33 - 0.66 and values below 0.33 represent music and other non-speech-like tracks.</li>\r\n                    <li><code>Tempo</code>: The overall estimated tempo of a track in beats per minute (BPM).</li>\r\n                    <li><code>Time Signature</code>: An estimated overall time signature of a track. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure).</li>\r\n                    <li><code>Valence</code>: A measure from 0 to 1 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive, while tracks with low valence sound more negative.</li>\r\n                </ul>\r\n            </Col>\r\n        </Row>\r\n    </Container>\r\n}\r\n\r\nexport default About;\r\n","import { TrackWithAudioFeatures } from '../models/Spotify';\r\n\r\n/*\r\n* Different methods of sorting x y points\r\n*/\r\n\r\nexport interface SortablePoint {\r\n    id: any,\r\n    x: number,\r\n    y: number\r\n}\r\n\r\nexport interface IndexedTrackId { // Minimal stored data\r\n    id: string,\r\n    index: {\r\n        before: number,\r\n        after: number\r\n    }\r\n}\r\n\r\nexport interface SpotifyTrackWithIndexes extends TrackWithAudioFeatures, IndexedTrackId { } // Not used here but relates to methods here\r\n\r\nexport const availableSortingMethods: {[key: string]: Function} = {\r\n    'Distance From Origin': originDistance,\r\n    'Nearest Neighbour': nearestNeighbourFromOrigin,\r\n    'X Axis': xAxis,\r\n    'Y Axis': yAxis,\r\n    'No Sorting': noSort\r\n}\r\n\r\nfunction distanceToPoint(xOrigin: number, yOrigin: number, x: number, y: number): number {\r\n    let a = xOrigin - x;\r\n    let b = yOrigin - y;\r\n    return Math.sqrt((a*a) + (b*b));\r\n}\r\n\r\n// Sort points based off their distance from the origin. Not great as it could jump from 1,0 to 0,1\r\nexport function originDistance(points: SortablePoint[]): SortablePoint[] {\r\n    let distances_from_origin = points.map(p => {\r\n        return {...p, distance: distanceToPoint(0, 0, p.x, p.y)}\r\n    });\r\n    return distances_from_origin.sort((a, b) => a.distance - b.distance);\r\n}\r\n\r\n// Sorts points by going point to point based off the closest left-over points. Starts at 0,0.\r\nexport function nearestNeighbourFromOrigin(points: SortablePoint[]): SortablePoint[] {\r\n    if (points.length === 0) {\r\n        return [];\r\n    }\r\n\r\n    let nearest_point_to_origin = points.reduce((accumulator: SortablePoint, currentValue: SortablePoint): SortablePoint => {\r\n        let acc_dist = distanceToPoint(0, 0, accumulator.x, accumulator.y);\r\n        let curr_dist = distanceToPoint(0, 0, currentValue.x, currentValue.y);\r\n        return acc_dist > curr_dist ? currentValue : accumulator;\r\n    });\r\n\r\n    let sorted_points: SortablePoint[] = [nearest_point_to_origin]; // Put the closest point to 0, 0 in the sorted list\r\n    let points_left: SortablePoint[] = points.slice(); // Make a copy\r\n    points_left = points_left.filter(p => p.id !== nearest_point_to_origin.id); // Remove nearest point\r\n\r\n    let current_point: SortablePoint = nearest_point_to_origin;\r\n    const reduce_to_closest_point = (accumulator: SortablePoint, currentValue: SortablePoint): SortablePoint => { // Keep function out of the loop\r\n        let acc_dist = distanceToPoint(current_point.x, current_point.y, accumulator.x, accumulator.y);\r\n        let curr_dist = distanceToPoint(current_point.x, current_point.y, currentValue.x, currentValue.y);\r\n        return acc_dist > curr_dist ? currentValue : accumulator;\r\n    };\r\n    while (points_left.length > 0) {\r\n        let closest_point: SortablePoint = points_left.reduce(reduce_to_closest_point);\r\n        sorted_points.push(closest_point);\r\n        points_left = points_left.filter(p => p.id !== closest_point.id);\r\n        current_point = closest_point;\r\n    }\r\n\r\n    return sorted_points;\r\n}\r\n\r\n// Return the data provided\r\nexport function noSort(points: SortablePoint[]): SortablePoint[] {\r\n    return points;\r\n}\r\n\r\n// Sort by x\r\nexport function xAxis(points: SortablePoint[]): SortablePoint[] {\r\n    return points.sort((a, b) => {\r\n        return a.x === b.x\r\n            ? 0\r\n            : a.x > b.x ? 1 : -1\r\n    });\r\n}\r\n\r\n// Sort by y\r\nexport function yAxis(points: SortablePoint[]): SortablePoint[] {\r\n    return points.sort((a, b) => {\r\n        return a.y === b.y\r\n            ? 0\r\n            : a.y > b.y ? 1 : -1\r\n    });\r\n}\r\n\r\n// Sort tracks given x and y features and a sorting method\r\nexport function sort(tracks: TrackWithAudioFeatures[], x_audio_feature: string, y_audio_feature: string, sorting_method: Function): IndexedTrackId[] {\r\n    // Get points initial indexes (to calculate movement)\r\n    let tracks_with_playlist_indexes: IndexedTrackId[] = tracks.map((t, i) => {\r\n        return { id: t.id, index: { before: i, after: 0 } };\r\n    });\r\n\r\n    // Convert tracks to sortable points\r\n    let tracks_as_sp: SortablePoint[] = tracks.map(t => {\r\n        if (t.audio_features !== undefined && t.audio_features !== null) {\r\n            let x = (t.audio_features[(x_audio_feature as keyof SpotifyApi.AudioFeaturesObject)] as number); // We know better than the compiler\r\n            let y = (t.audio_features[(y_audio_feature as keyof SpotifyApi.AudioFeaturesObject)] as number);\r\n            return { id: t.id, x: x, y: y }\r\n        } else { // Commonly occurs as t.audioFeatures === undefined on first playlist selection\r\n            return { id: t.id, x: 0, y: 0 }\r\n        }\r\n    });\r\n\r\n    // Sort the sortable points\r\n    let tracks_as_sp_sorted: SortablePoint[] = sorting_method(tracks_as_sp);\r\n\r\n    // Calculate new indexes using the sorted points\r\n    let tracks_with_sorted_indexes: IndexedTrackId[] = tracks_as_sp_sorted.map((sp, i) => {\r\n        let track = tracks_with_playlist_indexes.find(t => t.id === sp.id);\r\n        if (track !== undefined) {\r\n            return { ...track, index: { before: track.index.before, after: i } };\r\n        } else {\r\n            console.error('[TrackTable:tracks_with_sorted_indexes] Cannot find match for: ' + sp.id);\r\n            return null;\r\n        }\r\n    }).filter((t: IndexedTrackId | null): t is IndexedTrackId => t !== null);\r\n\r\n    // Quick debugging verification\r\n    if (tracks_with_sorted_indexes.length !== tracks.length) {\r\n        console.error('PointSorting.sort did not output the same amount of tracks input');\r\n    }\r\n\r\n    // Sort tracks by the new indexes\r\n    return tracks_with_sorted_indexes.sort((a, b) => a.index.after - b.index.after);\r\n}\r\n","import SpotifyWebApi from 'spotify-web-api-js';\r\nimport { chunkList } from './Utils';\r\nimport { Token, PlaylistObjectSimplifiedWithTrackIds, TrackWithAudioFeatures } from '../models/Spotify';\r\n\r\nconst playlistRequestLimit = 20;\r\nconst playlistTrackRequestLimit = 100;\r\nconst trackFeaturesRequestLimit = 100;\r\nconst maxRequestsSentAtOnce = 10;\r\n\r\nexport interface OffsetLimit {\r\n    offset: number,\r\n    limit: number\r\n}\r\n\r\nfunction offsetCalculation(limit: number, total: number): OffsetLimit[] {\r\n    // Calculate request offsets needed to be performed\r\n    let request_blocks: OffsetLimit[] = [];\r\n    let accounted_for = 0;\r\n    for (let i = 0; accounted_for < total; i++) {\r\n        request_blocks.push({ offset: i * limit, limit: limit });\r\n        accounted_for += limit;\r\n    }\r\n    return (request_blocks);\r\n}\r\n\r\nexport function getAllSpotifyUsersPlaylists(token: Token, user: SpotifyApi.UserObjectPrivate): Promise<PlaylistObjectSimplifiedWithTrackIds[]> {\r\n    // Gets all playlists for a user. Fast as it makes more than one request a time.\r\n    return new Promise((resolve, reject) => {\r\n        const spotifyApi = new SpotifyWebApi();\r\n        spotifyApi.setAccessToken(token.value);\r\n\r\n        let playlists: SpotifyApi.PlaylistObjectSimplified[] = [];\r\n        const offset = 0;\r\n        const limit = playlistRequestLimit;\r\n\r\n        let rejected = false;\r\n\r\n        spotifyApi.getUserPlaylists(user.id, { offset, limit })\r\n            .then(async data => {\r\n                playlists = [...playlists, ...data.items]; // Store data from initial request\r\n\r\n                // Calculate requests to be made and chunk them\r\n                const request_blocks = offsetCalculation(limit, data.total).splice(1); // Ignore the first as we have already made that request\r\n                const request_blocks_chunked = chunkList(request_blocks, maxRequestsSentAtOnce);\r\n\r\n                for (let i = 0; i < request_blocks_chunked.length; i++) {\r\n                    // Start all requests in this chunk\r\n                    let promises: Promise<SpotifyApi.ListOfUsersPlaylistsResponse>[] = [];\r\n                    for (let j = 0; j < request_blocks_chunked[i].length; j++) {\r\n                        promises.push( spotifyApi.getUserPlaylists(user.id, request_blocks_chunked[i][j]) );\r\n                    }\r\n                    // Wait for each request and get data\r\n                    await Promise.all(promises)\r\n                        .then(new_playlists => { playlists = [...playlists, ...new_playlists.map(i => i.items).flat()]; })\r\n                        .catch(err => { reject(err); rejected = true; });\r\n                    if (rejected) {\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // Convert to PlaylistObjectSimplifiedWithTrackIds using a blank list\r\n                resolve(playlists.map(p => { return {...p, track_ids: []} }));\r\n\r\n            }, err => {\r\n                reject(err);\r\n            });\r\n    });\r\n}\r\n\r\nexport function getAllTracksInPlaylist(token: Token, playlist: SpotifyApi.PlaylistObjectSimplified): Promise<TrackWithAudioFeatures[]> {\r\n    // Gets all tracks in a playlist. Fast as it makes more than one request a time.\r\n    return new Promise((resolve, reject) => {\r\n        const spotifyApi = new SpotifyWebApi();\r\n        spotifyApi.setAccessToken(token.value);\r\n\r\n        let tracks: SpotifyApi.TrackObjectFull[] = [];\r\n        const offset = 0;\r\n        const limit = playlistTrackRequestLimit;\r\n\r\n        let rejected = false;\r\n\r\n        spotifyApi.getPlaylistTracks(playlist.id, { offset, limit })\r\n            .then(async data => {\r\n                tracks = [...tracks, ...data.items.map(i => i.track)]; // Store data from initial request\r\n\r\n                // Calculate requests to be made and chunk them\r\n                const request_blocks = offsetCalculation(limit, data.total).splice(1); // Ignore the first as we have already made that request\r\n                const request_blocks_chunked = chunkList(request_blocks, maxRequestsSentAtOnce);\r\n\r\n                for (let i = 0; i < request_blocks_chunked.length; i++) {\r\n                    // Start all requests in this chunk\r\n                    let promises: Promise<SpotifyApi.PlaylistTrackResponse>[] = [];\r\n                    for (let j = 0; j < request_blocks_chunked[i].length; j++) {\r\n                        promises.push( spotifyApi.getPlaylistTracks(playlist.id, request_blocks_chunked[i][j]) );\r\n                    }\r\n                    // Wait for each request and get data\r\n                    await Promise.all(promises)\r\n                        .then(new_tracks => { tracks = [...tracks, ...new_tracks.map(i => i.items).flat().map(i => i.track)]; })\r\n                        .catch(err => { reject(err); rejected = true; });\r\n                    if (rejected) {\r\n                        break\r\n                    }\r\n                }\r\n\r\n                resolve(tracks.map(t => { return { ...t, audio_features: undefined } }));\r\n\r\n            }, err => {\r\n                reject(err);\r\n            });\r\n    });\r\n}\r\n\r\nexport function getAudioFeaturesForTracks(token: Token, track_ids: string[]): Promise<SpotifyApi.AudioFeaturesObject[]> {\r\n    // Gets all the audio features for a list of tracks. Fast as it makes more than one request a time.\r\n    return new Promise(async (resolve, reject) => {\r\n        const spotifyApi = new SpotifyWebApi();\r\n        spotifyApi.setAccessToken(token.value);\r\n\r\n        let features: SpotifyApi.AudioFeaturesObject[] = [];\r\n        const track_groups = chunkList(track_ids, trackFeaturesRequestLimit); // Tracks for each request\r\n        const track_groups_chunked = chunkList(track_groups, maxRequestsSentAtOnce); // Batches of requests\r\n\r\n        let rejected = false;\r\n\r\n        for (let i = 0; i < track_groups_chunked.length; i++) {\r\n            // Start all requests in this chunk\r\n            let promises: Promise<SpotifyApi.MultipleAudioFeaturesResponse>[] = [];\r\n            for (let j = 0; j < track_groups_chunked[i].length; j++) {\r\n                promises.push( spotifyApi.getAudioFeaturesForTracks(track_groups_chunked[i][j]) );\r\n            }\r\n            // Wait for each request and get data\r\n            await Promise.all(promises)\r\n                .then(new_features => { features = [...features, ...new_features.map(i => i.audio_features).flat()]; })\r\n                .catch(err => { reject(err); rejected = true; });\r\n            if (rejected) {\r\n                break\r\n            }\r\n        }\r\n\r\n        // if (!rejected) {\r\n\r\n        // }\r\n        resolve(features);\r\n\r\n    });\r\n}\r\n\r\nexport function createPlaylist(token: string, user: SpotifyApi.UserObjectPrivate, name: string, isPublic: boolean, track_uris: string[]): Promise<PlaylistObjectSimplifiedWithTrackIds> {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        const spotifyApi = new SpotifyWebApi();\r\n        spotifyApi.setAccessToken(token);\r\n        \r\n        return spotifyApi.createPlaylist(user.id, {\r\n            name: name,\r\n            public: isPublic,\r\n            description: 'Created by emotionify.nitratine.net'\r\n        })\r\n            .then(async playlist => {\r\n                // Chunk into blocks of 100\r\n                const chunks: string[][] = chunkList(track_uris, 100);\r\n\r\n                // Add tracks in order\r\n                for (let i = 0; i < chunks.length; i++) {\r\n                    await spotifyApi.addTracksToPlaylist(playlist.id, chunks[i])\r\n                        .catch(err => reject(err));\r\n                }\r\n\r\n                // Manually set the amount of tracks rather than requesting for it again\r\n                playlist.tracks.total = track_uris.length; \r\n                resolve({...playlist, track_ids: []});\r\n            }, err => {\r\n                reject(err);\r\n            });\r\n    });\r\n}\r\n","export interface SpotifyData {\r\n    user: SpotifyApi.UserObjectPrivate | undefined,\r\n    playlists: {\r\n        [key: string]: PlaylistObjectSimplifiedWithTrackIds\r\n    },\r\n    tracks: {\r\n        [key: string]: TrackWithAudioFeatures\r\n    }\r\n}\r\n\r\nexport interface Token {\r\n    value: string,\r\n    expiry: Date\r\n}\r\n\r\nexport interface PlaylistObjectSimplifiedWithTrackIds extends SpotifyApi.PlaylistObjectSimplified {\r\n    track_ids: string[]\r\n}\r\n\r\nexport interface TrackWithAudioFeatures extends SpotifyApi.TrackObjectFull {\r\n    audio_features: SpotifyApi.AudioFeaturesObject | null | undefined // undefined when none have been requested, null when they don't exist (after requesting)\r\n}\r\n\r\nexport interface AudioFeatureProperty {\r\n    key: string,\r\n    min: number | undefined,\r\n    max: number | undefined,\r\n    show_in_sort: boolean\r\n}\r\n\r\nexport const availableTrackAudioFeatures: {[key: string]: AudioFeatureProperty} = {\r\n    'Acousticness': {\r\n        key: 'acousticness',\r\n        min: 0,\r\n        max: 1,\r\n        show_in_sort: true\r\n    },\r\n    'Danceability': {\r\n        key: 'danceability',\r\n        min: 0,\r\n        max: 1,\r\n        show_in_sort: true\r\n    },\r\n    'Duration': {\r\n        key: 'duration_ms',\r\n        min: 0,\r\n        max: undefined,\r\n        show_in_sort: true\r\n    },\r\n    'Energy': {\r\n        key: 'energy',\r\n        min: 0,\r\n        max: 1,\r\n        show_in_sort: true\r\n    },\r\n    'Instrumentalness': {\r\n        key: 'instrumentalness',\r\n        min: 0,\r\n        max: 1,\r\n        show_in_sort: true\r\n    },\r\n    'Key': {\r\n        key: 'key',\r\n        min: undefined,\r\n        max: undefined,\r\n        show_in_sort: false\r\n    },\r\n    'Liveness': {\r\n        key: 'liveness',\r\n        min: 0,\r\n        max: 1,\r\n        show_in_sort: true\r\n    },\r\n    'Loudness': {\r\n        key: 'loudness',\r\n        min: -60,\r\n        max: 0,\r\n        show_in_sort: true\r\n    },\r\n    'Mode': {\r\n        key: 'mode',\r\n        min: 0,\r\n        max: 1,\r\n        show_in_sort: false\r\n    },\r\n    'Speechiness': {\r\n        key: 'speechiness',\r\n        min: 0,\r\n        max: 1,\r\n        show_in_sort: true\r\n    },\r\n    'Tempo': {\r\n        key: 'tempo',\r\n        min: undefined,\r\n        max: undefined,\r\n        show_in_sort: true\r\n    },\r\n    'Time Signature': {\r\n        key: 'time_signature',\r\n        min: 0,\r\n        max: undefined,\r\n        show_in_sort: false\r\n    },\r\n    'Valence': {\r\n        key: 'valence',\r\n        min: 0,\r\n        max: 1,\r\n        show_in_sort: true\r\n    },\r\n};\r\n","// Modified Source: https://github.com/rehooks/window-size\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\ninterface WindowDimensions {\r\n    innerHeight: number,\r\n    innerWidth: number,\r\n    outerHeight: number,\r\n    outerWidth: number\r\n}\r\n\r\nfunction getSize(): WindowDimensions {\r\n    return {\r\n        innerHeight: window.innerHeight,\r\n        innerWidth: window.innerWidth,\r\n        outerHeight: window.outerHeight,\r\n        outerWidth: window.outerWidth,\r\n    };\r\n}\r\n\r\nexport default function useWindowSize(): WindowDimensions {\r\n    let [windowSize, setWindowSize] = useState<WindowDimensions>(getSize());\r\n\r\n    function handleResize() {\r\n        setWindowSize(getSize());\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('resize', handleResize);\r\n        return () => {\r\n            window.removeEventListener('resize', handleResize);\r\n        };\r\n    }, []);\r\n\r\n    return windowSize;\r\n}\r\n","import React, { useState } from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport { PlaylistObjectSimplifiedWithTrackIds } from '../../models/Spotify';\r\nimport useWindowSize from '../../hooks/WindowSize';\r\n\r\ninterface IProps {\r\n    playlists: PlaylistObjectSimplifiedWithTrackIds[],\r\n    selectedPlaylistIds: string[],\r\n    multipleSelectionsAllowed: boolean,\r\n    onPlaylistSelectionChange: (playlist_ids: string[], scrollOnFirstSelection: boolean) => void\r\n}\r\n\r\nconst selectedBackground = 'linear-gradient(to right, rgba(0, 82, 157, 0.3), rgba(235, 18, 27, 0.3))';\r\n\r\nconst PlaylistSelection: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    const {playlists, selectedPlaylistIds, multipleSelectionsAllowed, onPlaylistSelectionChange} = props;\r\n\r\n    const [singlePlaylistSelection, setSinglePlaylistSelection] = useState(true);\r\n    const [search, setSearch] = useState('');\r\n    const windowSize = useWindowSize();\r\n\r\n    const onSearchChange = (event: React.FormEvent<any>) => setSearch(event.currentTarget.value);\r\n    const singlePlaylistSelectionChange = (value: boolean) => () => {\r\n        if (value && selectedPlaylistIds.length > 1) {\r\n            onPlaylistSelectionChange(selectedPlaylistIds.length > 0 ? [selectedPlaylistIds[0]] : [], false);\r\n        }\r\n        setSinglePlaylistSelection(value)\r\n    };\r\n    const onComponentPlaylistSelected = (playlist_id: string) => () => {\r\n        if (singlePlaylistSelection || !multipleSelectionsAllowed) {\r\n            onPlaylistSelectionChange([playlist_id], true);\r\n        } else {\r\n            if (selectedPlaylistIds.indexOf(playlist_id) === -1) {\r\n                onPlaylistSelectionChange([ ...selectedPlaylistIds, playlist_id ], false);\r\n            } else {\r\n                onPlaylistSelectionChange([ ...selectedPlaylistIds.filter(pid => pid !== playlist_id) ], false);\r\n            }\r\n        }\r\n    };\r\n\r\n    const filteredPlaylists = playlists.filter(p => p.name.indexOf(search) !== -1 || p.uri.indexOf(search) !== -1);\r\n    const sortedPlaylists = filteredPlaylists.sort((a: PlaylistObjectSimplifiedWithTrackIds, b: PlaylistObjectSimplifiedWithTrackIds) => a.name === b.name ? 0 : a.name > b.name ? 1 : -1);\r\n\r\n    const bootstrapBreakpointBiggerThanSm = () => windowSize.innerWidth > 576; // Bootstrap >sm in js\r\n\r\n    return <>\r\n        <h3 className=\"mb-3\">Select a Playlist</h3>\r\n        <div style={{ width: 700, maxWidth: '100%', margin: 'auto' }}>\r\n            <InputGroup style={{ marginBottom: 5 }}>\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text>{bootstrapBreakpointBiggerThanSm() ? 'Search Playlists': 'Search'}</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl placeholder=\"Playlist name...\" value={search} onChange={onSearchChange} />\r\n                {multipleSelectionsAllowed && <DropdownButton\r\n                    as={InputGroup.Append}\r\n                    variant=\"outline-secondary\"\r\n                    title={singlePlaylistSelection ? 'Single' : 'Multiple'}\r\n                    id=\"playlist-selection-types\"\r\n                    alignRight\r\n                >\r\n                    <Dropdown.Item onClick={singlePlaylistSelectionChange(true)}>Single Playlist Selection</Dropdown.Item>\r\n                    <Dropdown.Item onClick={singlePlaylistSelectionChange(false)}>Multiple Playlist Selection</Dropdown.Item>\r\n                </DropdownButton>}\r\n            </InputGroup>\r\n\r\n            <div style={{ maxHeight: 450, overflowX: 'auto' }}>\r\n                <Table striped hover>\r\n                    <tbody>\r\n                        {sortedPlaylists.map(playlist => \r\n                            <tr \r\n                                key={playlist.id} \r\n                                onClick={onComponentPlaylistSelected(playlist.id)} \r\n                                style={{ cursor: 'pointer', background: selectedPlaylistIds.indexOf(playlist.id) !== -1 ? selectedBackground : undefined, display: 'grid', gridTemplateColumns: '60px 1fr' }}\r\n                            >\r\n                                <td style={{ padding: 2 }}>\r\n                                    {playlist.images.length > 0 && <img src={playlist.images[0].url} style={{ width: '100%' }} alt={'Artwork for: ' + playlist.name}/>}\r\n                                </td>\r\n                                <td style={{ textAlign: 'left', padding: '0 0 0 10px' }}>\r\n                                    <div style={{ fontSize: 22 }}>{playlist.name}</div>\r\n                                    <div>\r\n                                        <Badge variant=\"primary\">{playlist.owner.display_name}</Badge>\r\n                                        <Badge variant=\"dark\" className=\"ml-1\">Songs: {playlist.tracks.total}</Badge>\r\n                                        <Badge variant=\"danger\" className=\"ml-1\">{playlist.public ? 'Public' : 'Private'}</Badge>\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        )}\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        </div>\r\n    </>\r\n}\r\n\r\nexport default PlaylistSelection;\r\n","import React from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport { PlaylistObjectSimplifiedWithTrackIds } from '../../models/Spotify';\r\n\r\ninterface IProps {\r\n    playlists: PlaylistObjectSimplifiedWithTrackIds[],\r\n    tracksLoading: boolean\r\n}\r\n\r\nconst PlaylistDetails: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    const { playlists, tracksLoading } = props;\r\n\r\n    if (playlists.length === 1) {\r\n        const playlist = playlists[0];\r\n        return <>\r\n            <h3 className=\"mt-4 mb-0\">{playlist.name}</h3>\r\n            <div>\r\n                <a href={playlist.owner.external_urls.spotify}><Badge variant=\"primary\">{playlist.owner.display_name}</Badge></a>\r\n                <Badge variant=\"dark\" className=\"ml-1\">Songs: {playlist.tracks.total}</Badge>\r\n                <a href={playlist.external_urls.spotify} className=\"ml-1\"><Badge variant=\"success\">Spotify</Badge></a>\r\n                <Badge variant=\"danger\" className=\"ml-1\">{playlist.public ? 'Public' : 'Private'}</Badge>\r\n            </div>\r\n            {tracksLoading && <div className=\"text-center mt-3\">\r\n                <Spinner animation=\"border\" />\r\n            </div>}\r\n        </>;\r\n    } else {\r\n        return <>\r\n            <h3 className=\"mt-4 mb-0\">{playlists.length} Playlist{playlists.length > 1 && 's'} Selected</h3>\r\n            <div>\r\n                <Badge variant=\"dark\" className=\"ml-1\">Songs: {playlists.map(p => p.tracks.total).reduce((a, b) => a + b)}</Badge>\r\n            </div>\r\n            {tracksLoading && <div className=\"text-center mt-3\">\r\n                <Spinner animation=\"border\" />\r\n            </div>}\r\n        </>;\r\n    }\r\n}\r\n\r\nexport default PlaylistDetails;\r\n","import React from 'react';\r\nimport Plot from 'react-plotly.js';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport { TrackWithAudioFeatures } from '../../models/Spotify';\r\n\r\ninterface IProps {\r\n    tracks: TrackWithAudioFeatures[],\r\n    x_audio_feature_key: string,\r\n    y_audio_feature_key: string,\r\n    x_audio_feature_min: number | undefined,\r\n    x_audio_feature_max: number | undefined,\r\n    y_audio_feature_min: number | undefined,\r\n    y_audio_feature_max: number | undefined,\r\n    x_audio_feature_name: string,\r\n    y_audio_feature_name: string\r\n}\r\n\r\ninterface Point {\r\n    x: number,\r\n    y: number\r\n}\r\n\r\ninterface TrackPoint extends Point {\r\n    track: {\r\n        id: string,\r\n        title: string,\r\n        artist: string,\r\n        length: number\r\n    },\r\n}\r\n\r\nfunction getDistancePercentageAlongLineTheOfClosestPointOnLineToAnArbitaryPoint(start: Point, end: Point, point: Point): number {\r\n    // Modified from https://jsfiddle.net/soulwire/UA6H5/\r\n    let atob = { x: end.x - start.x, y: end.y - start.y };\r\n    let atop = { x: point.x - start.x, y: point.y - start.y };\r\n    let len = atob.x * atob.x + atob.y * atob.y;\r\n    let dot = atop.x * atob.x + atop.y * atob.y;\r\n    let t = Math.min( 1, Math.max( 0, dot / len ) );\r\n\r\n    // dot = ( end.x - start.x ) * ( point.y - start.y ) - ( end.y - start.y ) * ( point.x - start.x );\r\n    // let distance_along_line = t;\r\n    // let distance_away_from_line = dot;\r\n    // let on_the_line = dot < 1;\r\n    // let x = start.x + atob.x * t;\r\n    // let y = start.y + atob.y * t;\r\n\r\n    return t;\r\n}\r\n\r\nfunction getPointAlongColourGradient(start_hex_colour: string, end_hex_colour: string, percentage: number): string {\r\n    const hex = (x: number): string => {\r\n        let tmp = x.toString(16);\r\n        return (tmp.length === 1) ? '0' + tmp : tmp;\r\n    }\r\n\r\n    var r = Math.ceil(parseInt(end_hex_colour.substring(0,2), 16) * percentage + parseInt(start_hex_colour.substring(0,2), 16) * (1-percentage));\r\n    var g = Math.ceil(parseInt(end_hex_colour.substring(2,4), 16) * percentage + parseInt(start_hex_colour.substring(2,4), 16) * (1-percentage));\r\n    var b = Math.ceil(parseInt(end_hex_colour.substring(4,6), 16) * percentage + parseInt(start_hex_colour.substring(4,6), 16) * (1-percentage));\r\n    return hex(r) + hex(g) + hex(b);\r\n}\r\n\r\nconst PlotTracks: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    const { tracks, x_audio_feature_key, y_audio_feature_key, x_audio_feature_name, y_audio_feature_name } = props;\r\n    const { x_audio_feature_min, x_audio_feature_max, y_audio_feature_min, y_audio_feature_max } = props;\r\n\r\n    const points: TrackPoint[] = tracks.map(t => {\r\n        const track = {\r\n            id: t.id,\r\n            title: t.name,\r\n            artist: t.artists.map(a => a.name).join(', '),\r\n            length: t.duration_ms\r\n        }\r\n\r\n        if (t.audio_features !== undefined && t.audio_features !== null) {\r\n            const x = (t.audio_features[(x_audio_feature_key as keyof SpotifyApi.AudioFeaturesObject)] as number);\r\n            const y = (t.audio_features[(y_audio_feature_key as keyof SpotifyApi.AudioFeaturesObject)] as number);\r\n            return { x: x, y: y, track: track }\r\n        } else if (t.audio_features === undefined) { // Commonly occurs as t.audio_features === undefined on first playlist selection\r\n            return { x: 0, y: 0, track: track }\r\n        } else { // t.audio_features === null when no audio features could be found (ignore these then - we should not plot them)\r\n            return null;\r\n        }\r\n    }).filter((sp): sp is TrackPoint => sp !== null);\r\n\r\n    // Max and min points in the data\r\n    const points_x_min: number = Math.min(...points.map(p => p.x));\r\n    const points_y_min: number = Math.min(...points.map(p => p.y));\r\n    const points_x_max: number = Math.max(...points.map(p => p.x));\r\n    const points_y_max: number = Math.max(...points.map(p => p.y));\r\n\r\n    // Mix expected and actual min's and max's to defined the colour gradient \r\n    const colour_x_min: number = x_audio_feature_min !== undefined ? Math.min(x_audio_feature_min, points_x_min) : points_x_min;\r\n    const colour_x_max: number = x_audio_feature_max !== undefined ? Math.max(x_audio_feature_max, points_x_max) : points_x_max;\r\n    const colour_y_min: number = y_audio_feature_min !== undefined ? Math.min(y_audio_feature_min, points_y_min) : points_y_min;\r\n    const colour_y_max: number = y_audio_feature_max !== undefined ? Math.max(y_audio_feature_max, points_y_max) : points_y_max;\r\n\r\n    // The min and max are passed in, but still take the points into account just incase there are values outside of the defined range\r\n    const scale_x_min: number | undefined = x_audio_feature_min !== undefined ? Math.min(x_audio_feature_min, points_x_min) : undefined;\r\n    const scale_x_max: number | undefined = x_audio_feature_max !== undefined ? Math.max(x_audio_feature_max, points_x_max) : undefined;\r\n    const scale_y_min: number | undefined = y_audio_feature_min !== undefined ? Math.min(y_audio_feature_min, points_y_min) : undefined;\r\n    const scale_y_max: number | undefined = y_audio_feature_max !== undefined ? Math.max(y_audio_feature_max, points_y_max) : undefined;\r\n\r\n    return <>\r\n        <Plot\r\n            data={[{\r\n                y: points.map(p => p.y),\r\n                x: points.map(p => p.x),\r\n                text: points.map(p => 'Title: ' + p.track.title + '<br>Artist: ' + p.track.artist + '<br>' + x_audio_feature_name + ': ' + p.x + '<br>' + y_audio_feature_name + ': ' + p.y),\r\n                hoverinfo: \"text\",\r\n                mode: \"lines+markers\",\r\n                marker: {\r\n                    size: 10,\r\n                    color: points.map(p => {\r\n                        let distanceAlongGradient = getDistancePercentageAlongLineTheOfClosestPointOnLineToAnArbitaryPoint({x: colour_x_min, y: colour_y_min}, {x: colour_x_max, y: colour_y_max}, {x: p.x, y: p.y});\r\n                        return '#' + getPointAlongColourGradient('00529d', 'eb121b', distanceAlongGradient);\r\n                    })\r\n                },\r\n                line: {\r\n                    color: 'rgba(44, 48, 51, 0.5)',\r\n                    width: 1\r\n                }\r\n            }]}\r\n            layout={{ \r\n                hovermode: \"closest\", \r\n                margin: {t: 0, b: 0, l: 0, r: 0}, \r\n                plot_bgcolor: 'transparent', \r\n                paper_bgcolor: 'transparent',\r\n                xaxis: {\r\n                    range: [scale_x_min, scale_x_max]\r\n                },\r\n                yaxis: {\r\n                    range: [scale_y_min, scale_y_max]\r\n                }\r\n            }}\r\n            useResizeHandler={true}\r\n            style={{ \r\n                width: \"100%\",\r\n                maxWidth: 700,\r\n                height: 450,\r\n                margin: 'auto',\r\n                border: '2px solid #6c757d',\r\n                overflow: 'hidden',\r\n                borderRadius: 10\r\n            }}\r\n        />\r\n        {tracks.filter(a => a.audio_features === null).length > 0 && <Alert variant=\"warning\" className=\"mt-2 d-inline-block\">\r\n            Warning: Some songs are missing audio features.\r\n            <br />Look in the table below to identify these songs (they will have no values beside them).\r\n        </Alert>}\r\n    </>\r\n}\r\n\r\nexport default PlotTracks;\r\n","import React, { useState } from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\nimport { SpotifyTrackWithIndexes } from '../../logic/PointSorting';\r\nimport { randomString } from '../../logic/Utils';\r\n\r\ninterface IProps {\r\n    tracks: SpotifyTrackWithIndexes[], // These are sorted using the current method when they come in\r\n    x_audio_feature: string,\r\n    x_audio_feature_name: string,\r\n    y_audio_feature: string,\r\n    y_audio_feature_name: string\r\n}\r\n\r\nconst header_cell_style: React.CSSProperties = {\r\n    position: 'sticky',\r\n    top: 0,\r\n    background: 'white',\r\n    borderTop: 0\r\n}\r\n\r\nconst expandedDefault = false;\r\n\r\nconst TrackTable: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    const {tracks, x_audio_feature, x_audio_feature_name, y_audio_feature, y_audio_feature_name} = props;\r\n\r\n    const [randomEventKey] = useState(randomString(16));\r\n    const [expanded, setExpanded] = useState(expandedDefault);\r\n    const toggleExpansion = () => setExpanded(!expanded);\r\n\r\n    return <Accordion defaultActiveKey={expandedDefault ? randomEventKey : undefined} style={{ maxWidth: 900, margin: 'auto' }}>\r\n        <Card>\r\n            <Accordion.Toggle as={Card.Header} eventKey={randomEventKey} onClick={toggleExpansion}>{expanded ? 'Songs in Playlist (click to collapse)' : 'Songs in Playlist (click to expand)'}</Accordion.Toggle>\r\n            <Accordion.Collapse eventKey={randomEventKey}>\r\n                <Card.Body className=\"p-0\" style={{ maxHeight: 400, overflowY: 'auto', borderTop: '1px solid #dee2e6' }}>\r\n                    <Table bordered striped size=\"sm\" style={{borderTop: 0}}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th style={header_cell_style}>Moved</th>\r\n                                <th style={header_cell_style}>Title</th>\r\n                                <th style={header_cell_style} className=\"d-none d-md-table-cell\">Artists</th>\r\n                                <th style={header_cell_style}>{x_audio_feature_name}</th>\r\n                                <th style={header_cell_style}>{y_audio_feature_name}</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {tracks.map(track => <tr key={track.id}>\r\n                                <td style={track.index.after - track.index.before === 0 ? {color: 'black'} : track.index.after - track.index.before < 0 ? {color: 'green'} : {color: 'red'}}>\r\n                                    {track.index.before - track.index.after}\r\n                                </td>\r\n                                <td>{track.name}</td>\r\n                                <td className=\"d-none d-md-table-cell\">{track.artists.map(a => a.name).join(', ')}</td>\r\n                                <td>{track.audio_features !== undefined && track.audio_features !== null && track.audio_features[(x_audio_feature as keyof SpotifyApi.AudioFeaturesObject)]}</td>\r\n                                <td>{track.audio_features !== undefined && track.audio_features !== null && track.audio_features[(y_audio_feature as keyof SpotifyApi.AudioFeaturesObject)]}</td>\r\n                            </tr>)}\r\n                        </tbody>\r\n                    </Table>\r\n                </Card.Body>\r\n            </Accordion.Collapse>\r\n        </Card>\r\n    </Accordion>\r\n}\r\n\r\nexport default TrackTable;\r\n","import React from 'react';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\n\r\ninterface IProps {\r\n    available_audio_features: string[],\r\n    available_track_sorting_methods: string[],\r\n    selected_x_axis: string,\r\n    selected_y_axis: string,\r\n    selected_sorting_method: string,\r\n    onXAxisSelect: (selection: string) => void,\r\n    onYAxisSelect: (selection: string) => void,\r\n    onSortMethodSelect: (selection: string) => void\r\n}\r\n\r\nconst TrackSortControl: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    return <>\r\n        <InputGroup className=\"mr-3 mt-1\" style={{display: 'inline-flex', width: 'auto'}}>\r\n            <InputGroup.Prepend>\r\n                <InputGroup.Text>X-Axis ( ↔ )</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <DropdownButton\r\n                as={InputGroup.Append}\r\n                variant=\"outline-secondary\"\r\n                title={props.selected_x_axis}\r\n                id=\"X-Axis\"\r\n            >\r\n                {props.available_audio_features.map(audio_feature =>\r\n                    <Dropdown.Item key={audio_feature} onClick={() => props.onXAxisSelect(audio_feature)}>{audio_feature}</Dropdown.Item>\r\n                )}\r\n            </DropdownButton>\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"mr-3 mt-1\" style={{display: 'inline-flex', width: 'auto'}}>\r\n            <InputGroup.Prepend>\r\n                <InputGroup.Text>Y-Axis ( ↕ )</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <DropdownButton\r\n                as={InputGroup.Append}\r\n                variant=\"outline-secondary\"\r\n                title={props.selected_y_axis}\r\n                id=\"Y-Axis\"\r\n            >\r\n                {props.available_audio_features.map(audio_feature =>\r\n                    <Dropdown.Item key={audio_feature} onClick={() => props.onYAxisSelect(audio_feature)}>{audio_feature}</Dropdown.Item>\r\n                )}\r\n            </DropdownButton>\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"mt-1\" style={{display: 'inline-flex', width: 'auto'}}>\r\n            <InputGroup.Prepend>\r\n                <InputGroup.Text>Sort Method</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <DropdownButton\r\n                as={InputGroup.Append}\r\n                variant=\"outline-secondary\"\r\n                title={props.selected_sorting_method}\r\n                id=\"Sort-Method\"\r\n            >\r\n                {props.available_track_sorting_methods.map(sorting_method =>\r\n                    <Dropdown.Item key={sorting_method} onClick={() => props.onSortMethodSelect(sorting_method)}>{sorting_method}</Dropdown.Item>\r\n                )}\r\n            </DropdownButton>\r\n        </InputGroup>\r\n    </>\r\n}\r\n\r\nexport default TrackSortControl;\r\n","import React, { useState } from 'react';\r\nimport cogoToast from 'cogo-toast';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Button from 'react-bootstrap/Button';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport { BsPrefixProps, ReplaceProps } from 'react-bootstrap/helpers';\r\nimport { FormControlProps } from 'react-bootstrap/FormControl';\r\n\r\ninterface IProps {\r\n    onExport: (name: string, makePublic: boolean) => Promise<boolean>\r\n}\r\n\r\nexport const Export: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    const { onExport } = props;\r\n\r\n    const [name, setName] = useState('');\r\n    const [makePublic, setMakePublic] = useState(false);\r\n    const [nameInvalid, setNameInvalid] = useState(false);\r\n\r\n    const onNameChange = (e: React.FormEvent<ReplaceProps<\"input\", BsPrefixProps<\"input\"> & FormControlProps>>) => {\r\n        if (e.currentTarget.value !== undefined) {\r\n            setName(e.currentTarget.value);\r\n            setNameInvalid(e.currentTarget.value === '');\r\n        }\r\n    }\r\n\r\n    const onMakePublicSelect = (makePublic: boolean) => () => setMakePublic(makePublic);\r\n\r\n    const onCreate = () => {\r\n        if (name === '') {\r\n            setNameInvalid(true);\r\n        } else {\r\n            onExport(name, makePublic)\r\n                .then(success => {\r\n                    if (success) {\r\n                        setName('');\r\n                        cogoToast.success(\r\n                            'Playlist has been created. You can go to Spotify to see your new playlist.',\r\n                            { position: \"bottom-center\", heading: 'Playlist Created', hideAfter: 10, onClick: (hide: any) => hide() }\r\n                        );\r\n                    } else {\r\n                        cogoToast.error(\r\n                            'Failed to create playlist. Make sure you are connected to the internet and that your token is valid.',\r\n                            { position: \"bottom-center\", heading: 'Failed To Create Playlist', hideAfter: 10, onClick: (hide: any) => hide() }\r\n                        );\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <h4 className=\"mb-2\">Create New Playlist</h4>\r\n        <InputGroup className=\"mb-3 d-none d-sm-inline-flex\" style={{ maxWidth: 500 }}>\r\n            <InputGroup.Prepend>\r\n                <InputGroup.Text id=\"playlist-name\">Playlist Name</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <FormControl\r\n                placeholder=\"Playlist Name\"\r\n                aria-label=\"Playlist Name\"\r\n                aria-describedby=\"playlist-name\"\r\n                value={name}\r\n                onChange={onNameChange}\r\n                isInvalid={nameInvalid}\r\n            />\r\n            <DropdownButton\r\n                as={InputGroup.Append}\r\n                variant={'outline-secondary'}\r\n                title={makePublic ? 'Public' : 'Private'}\r\n                id=\"make-private\"\r\n            >\r\n                <Dropdown.Item onClick={onMakePublicSelect(false)}>Private</Dropdown.Item>\r\n                <Dropdown.Item onClick={onMakePublicSelect(true)}>Public</Dropdown.Item>\r\n            </DropdownButton>\r\n            <InputGroup.Append>\r\n                <Button variant={'outline-secondary'} onClick={onCreate}>Create</Button>\r\n            </InputGroup.Append>\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"mb-3 d-inline-flex d-sm-none\" style={{ maxWidth: 500, justifyContent: 'center' }}>\r\n            <InputGroup.Prepend>\r\n                <InputGroup.Text id=\"playlist-name\">Playlist Name</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <FormControl\r\n                placeholder=\"Playlist Name\"\r\n                aria-label=\"Playlist Name\"\r\n                aria-describedby=\"playlist-name\"\r\n                value={name}\r\n                onChange={onNameChange}\r\n                isInvalid={nameInvalid}\r\n            />\r\n        </InputGroup>\r\n        <InputGroup className=\"mb-3 d-inline-flex d-sm-none\" style={{ maxWidth: 500, justifyContent: 'center' }}>\r\n            <DropdownButton\r\n                as={InputGroup.Prepend}\r\n                variant={'outline-secondary'}\r\n                title={makePublic ? 'Public' : 'Private'}\r\n                id=\"make-private\"\r\n            >\r\n                <Dropdown.Item onClick={onMakePublicSelect(false)}>Private</Dropdown.Item>\r\n                <Dropdown.Item onClick={onMakePublicSelect(true)}>Public</Dropdown.Item>\r\n            </DropdownButton>\r\n            <InputGroup.Append>\r\n                <Button variant={'outline-secondary'} onClick={onCreate}>Create</Button>\r\n            </InputGroup.Append>\r\n        </InputGroup>\r\n    </>\r\n}\r\n\r\nexport default Export;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { useTitle } from 'hookrouter';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport { availableSortingMethods, IndexedTrackId, sort, SpotifyTrackWithIndexes } from '../../logic/PointSorting';\r\nimport { createPlaylist } from '../../logic/Spotify';\r\nimport { PlaylistObjectSimplifiedWithTrackIds, availableTrackAudioFeatures, TrackWithAudioFeatures } from '../../models/Spotify';\r\nimport { Token } from '../../models/Spotify'\r\nimport PlaylistSelectionTable from './PlaylistSelection';\r\nimport PlaylistDetails from './PlaylistDetails';\r\nimport PlotTracks from './PlotTracks';\r\nimport TrackTable from './TrackTable';\r\nimport TrackSortControl from './TrackSortControl';\r\nimport Export from './Export';\r\nimport SpotifyLoginStatusButton from '../../components/SpotifyLoginStatusButton';\r\n\r\ninterface IProps {\r\n    token: Token | undefined,\r\n    user: SpotifyApi.UserObjectPrivate | undefined,\r\n    playlists: { [key: string]: PlaylistObjectSimplifiedWithTrackIds },\r\n    tracks: { [key: string]: TrackWithAudioFeatures },\r\n    playlistsLoading: Set<string>,\r\n    refreshPlaylist: (playlist: SpotifyApi.PlaylistObjectSimplified) => void,\r\n    refreshUsersPlaylists: (hard: boolean) => void\r\n}\r\n\r\ninterface selectedAxis {\r\n    x: string,\r\n    y: string\r\n}\r\n\r\nexport const Sort: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    const { token, user, playlists, tracks, playlistsLoading } = props;\r\n    const { refreshPlaylist, refreshUsersPlaylists } = props;\r\n\r\n    useTitle('Emotionify - Sort');\r\n    const [selectedPlaylistIds, setSelectedPlaylistIds] = useState<string[]>([]);\r\n    const [selectedAxis, setSelectedAxis] = useState<selectedAxis>({ x: 'Valence', y: 'Energy' });\r\n    const [sortingMethod, setSortingMethod] = useState<string>('Distance From Origin');\r\n    const [sortedTrackIds, setSortedTrackIds] = useState<IndexedTrackId[]>([]);\r\n    const [firstPlaylistSelection, setFirstPlaylistSelection] = useState(true);\r\n    const playlistDetailsWrapperNode = useRef<HTMLHeadingElement | null>(null);\r\n\r\n    const onPlaylistSelectionChange = (playlist_ids: string[], scrollOnFirstSelection: boolean = false) => {\r\n        setSelectedPlaylistIds(playlist_ids);\r\n        playlist_ids.forEach(playlist_id => {\r\n            if (playlists[playlist_id].track_ids.length === 0) {\r\n                refreshPlaylist(playlists[playlist_id]);\r\n            }\r\n        });\r\n        // Scroll on first selection\r\n        if (scrollOnFirstSelection && firstPlaylistSelection) {\r\n            setTimeout(() => {\r\n                if (playlistDetailsWrapperNode.current !== null) {\r\n                    window.scroll({\r\n                        top: playlistDetailsWrapperNode.current.getBoundingClientRect().top + window.scrollY - 50,\r\n                        behavior: 'smooth'\r\n                    });\r\n                }\r\n            }, 300); // Wait for elements below to appear\r\n        }\r\n        setFirstPlaylistSelection(false);\r\n    }\r\n    const onXAxisSelect = (selection: string) => setSelectedAxis({ ...selectedAxis, x: selection });\r\n    const onYAxisSelect = (selection: string) => setSelectedAxis({ ...selectedAxis, y: selection });\r\n    const onSortMethodSelect = (selection: string) => setSortingMethod(selection);\r\n\r\n    useEffect(() => {\r\n        if (selectedPlaylistIds.length > 0) {\r\n            const selected_playlist_track_ids: string[] = selectedPlaylistIds.map(pid => pid in playlists ? playlists[pid].track_ids : []).flat();\r\n            const selected_playlist_tracks: TrackWithAudioFeatures[] = Object.values(tracks)\r\n                .filter(t => selected_playlist_track_ids.indexOf(t.id) !== -1)\r\n                .sort((a: TrackWithAudioFeatures, b: TrackWithAudioFeatures): number => { // Do a sort to put them in the correct order again (fixes incorrect order due to overlapping playlists)\r\n                    const aIndex = selected_playlist_track_ids.indexOf(a.id);\r\n                    const bIndex = selected_playlist_track_ids.indexOf(b.id);\r\n                    return aIndex === bIndex ? 0 : aIndex > bIndex ? 1 : -1\r\n                });\r\n            setSortedTrackIds(sort(\r\n                selected_playlist_tracks, \r\n                availableTrackAudioFeatures[selectedAxis.x].key, \r\n                availableTrackAudioFeatures[selectedAxis.y].key, \r\n                availableSortingMethods[sortingMethod]\r\n            ));\r\n        } else {\r\n            setSortedTrackIds([]);\r\n        }\r\n    }, [selectedPlaylistIds, selectedAxis, sortingMethod, playlists, tracks]);\r\n\r\n    const sortedTrackIdsThatExist = sortedTrackIds.filter(t => tracks[t.id] !== undefined); // Need to check if the tracks currently exist (some of these track id's don't match to tracks when selecting different playlists quickly)\r\n    const sorted_tracks: TrackWithAudioFeatures[] = sortedTrackIdsThatExist.map(t => tracks[t.id]);\r\n    const sorted_tracks_with_indexes: SpotifyTrackWithIndexes[] = sortedTrackIdsThatExist.map(it => { return { ...tracks[it.id], ...it } });\r\n\r\n    const onExport = (name: string, isPublic: boolean): Promise<boolean> => {\r\n        return new Promise(async (resolve, reject) => {\r\n            if (token !== undefined && sortedTrackIds !== undefined && user !== undefined) {\r\n                // Map the sorted tracks to uris\r\n                let track_uris: string[] = sortedTrackIds.map(st => tracks[st.id].uri);\r\n                // Create the playlist\r\n                let success: boolean = await createPlaylist(token.value, user, name, isPublic, track_uris)\r\n                    .then(playlist => {\r\n                        refreshUsersPlaylists(false); // Get the new playlist by refreshing the playlist list (keep current track ids to not loose plot data)\r\n                        return true;\r\n                    }, err => {\r\n                        console.error(err);\r\n                        return false;\r\n                    });\r\n                resolve(success);\r\n            }\r\n            resolve(false);\r\n        });\r\n    }\r\n\r\n    const header = <Container className=\"mt-3 mb-4\">\r\n        <h1 className=\"text-center\">Playlist Sorting</h1>\r\n        <p className=\"text-center lead col-md-7 mx-auto\">Here you can select a playlist and look at how the new playlist is sorted. You can then create the new playlist or select a different playlist.</p>\r\n    </Container>;\r\n\r\n    if (token === undefined) {\r\n        return <>\r\n            {header}\r\n            <Container className=\"text-center\">\r\n                <h2>Sign into Spotify</h2>\r\n                <p>To get access to your playlists and the ability to create playlists, you need to sign into Spotify.</p>\r\n                <SpotifyLoginStatusButton user={user} />\r\n            </Container>\r\n        </>\r\n    }\r\n\r\n    return <>\r\n        {header}\r\n        <Container className=\"text-center mb-5\">\r\n\r\n            <PlaylistSelectionTable \r\n                playlists={Object.values(playlists)}\r\n                selectedPlaylistIds={selectedPlaylistIds}\r\n                multipleSelectionsAllowed={true}\r\n                onPlaylistSelectionChange={onPlaylistSelectionChange} \r\n            />\r\n\r\n            {selectedPlaylistIds.length > 0 && <>\r\n                <hr />\r\n\r\n                <div className=\"mb-4\" ref={playlistDetailsWrapperNode}>\r\n                    <PlaylistDetails \r\n                        playlists={selectedPlaylistIds.map(pid => pid in playlists ? playlists[pid] : null).filter((p: PlaylistObjectSimplifiedWithTrackIds | null): p is PlaylistObjectSimplifiedWithTrackIds => p !== null)}\r\n                        tracksLoading={selectedPlaylistIds.map(pid => playlistsLoading.has(pid)).reduce((a, b) => a || b)}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"mb-3\">\r\n                    <PlotTracks \r\n                        tracks={sorted_tracks}\r\n                        x_audio_feature_key={availableTrackAudioFeatures[selectedAxis.x].key}\r\n                        y_audio_feature_key={availableTrackAudioFeatures[selectedAxis.y].key}\r\n                        x_audio_feature_min={availableTrackAudioFeatures[selectedAxis.x].min}\r\n                        x_audio_feature_max={availableTrackAudioFeatures[selectedAxis.x].max}\r\n                        y_audio_feature_min={availableTrackAudioFeatures[selectedAxis.y].min}\r\n                        y_audio_feature_max={availableTrackAudioFeatures[selectedAxis.x].max}\r\n                        x_audio_feature_name={selectedAxis.x}\r\n                        y_audio_feature_name={selectedAxis.y}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"mb-3\">\r\n                    <TrackSortControl \r\n                        available_audio_features={Object.keys(availableTrackAudioFeatures).filter(audio_feature_name => availableTrackAudioFeatures[audio_feature_name].show_in_sort)} \r\n                        available_track_sorting_methods={Object.keys(availableSortingMethods)}\r\n                        selected_x_axis={selectedAxis.x}\r\n                        selected_y_axis={selectedAxis.y}\r\n                        selected_sorting_method={sortingMethod}\r\n                        onXAxisSelect={onXAxisSelect}\r\n                        onYAxisSelect={onYAxisSelect}\r\n                        onSortMethodSelect={onSortMethodSelect}\r\n                    />\r\n                </div>\r\n\r\n                {selectedPlaylistIds.map(pid => pid in playlists ? playlists[pid].track_ids.length : 0).reduce((a, b) => a + b) > 0 && selectedPlaylistIds.map(pid => pid in playlists ? playlists[pid].tracks.total : 0).reduce((a, b) => a + b) !== sortedTrackIds.length && \r\n                    <Alert variant=\"warning\" style={{display: 'inline-block'}}>\r\n                        Warning: Duplicate songs will be removed in the new playlist\r\n                    </Alert>\r\n                }\r\n\r\n                <div className=\"mb-5\">\r\n                    <TrackTable \r\n                        tracks={sorted_tracks_with_indexes}\r\n                        x_audio_feature={availableTrackAudioFeatures[selectedAxis.x].key}\r\n                        x_audio_feature_name={selectedAxis.x}\r\n                        y_audio_feature={availableTrackAudioFeatures[selectedAxis.y].key}\r\n                        y_audio_feature_name={selectedAxis.y}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"mb-5\">\r\n                    <Export onExport={onExport}/>\r\n                </div>\r\n            </>}\r\n\r\n        </Container>\r\n    </>\r\n}\r\n\r\nexport default Sort;\r\n","import React from 'react';\r\nimport { navigate, useTitle } from 'hookrouter';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\ninterface IProps { }\r\n\r\nconst NotFound: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    useTitle('Emotionify - Page Not Found');\r\n\r\n    const navigateHome = () => navigate('/');\r\n\r\n    return <Container className=\"text-center\">\r\n        <h1 className=\"my-4\">Page Not Found</h1>\r\n        <Button onClick={navigateHome}>Go Home &rarr;</Button>\r\n    </Container>;\r\n}\r\n\r\nexport default NotFound;\r\n","// Modified Source: https://github.com/oieduardorabelo/use-navigator-online\r\n\r\nimport { useEffect, useState } from \"react\";\r\n\r\n\r\nfunction useNavigatorOnline() {\r\n    let [isOnline, setIsOnline] = useState(window.navigator.onLine);\r\n\r\n    useEffect(() => {\r\n        function handleOnlineStatusChange(event: Event) {\r\n            setIsOnline(window.navigator.onLine);\r\n        }\r\n\r\n        window.addEventListener(\"online\", handleOnlineStatusChange);\r\n        window.addEventListener(\"offline\", handleOnlineStatusChange);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"online\", handleOnlineStatusChange);\r\n            window.removeEventListener(\"offline\", handleOnlineStatusChange);\r\n        };\r\n    }, []);\r\n\r\n    return isOnline;\r\n}\r\n\r\nexport default useNavigatorOnline;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useRoutes, useRedirect } from 'hookrouter';\r\nimport SpotifyWebApi from 'spotify-web-api-js';\r\nimport cogoToast from 'cogo-toast';\r\nimport Navigation from './components/Navigation';\r\nimport TokenRefreshWarning from './components/TokenRefreshWarning';\r\nimport StoredDataDialog from './components/StoredDataDialog';\r\nimport SpotifyAuthorization from './pages/SpotifyAuthorization';\r\nimport Home from './pages/Home';\r\nimport About from './pages/About';\r\nimport Sort from './pages/Sort';\r\nimport NotFound from './pages/NotFound';\r\nimport useNavigatorOnline from './hooks/NavigatorOnline';\r\nimport { Token, SpotifyData, PlaylistObjectSimplifiedWithTrackIds, TrackWithAudioFeatures } from './models/Spotify';\r\nimport { getAllSpotifyUsersPlaylists, getAllTracksInPlaylist, getAudioFeaturesForTracks } from './logic/Spotify';\r\nimport { arrayToObject } from './logic/Utils';\r\n\r\nconst localStorageKey = 'emotionify-app';\r\nconst storageVersion = 1;\r\n\r\nconst emptySpotifyData = {\r\n    user: undefined,\r\n    playlists: {},\r\n    tracks: {},\r\n    audioFeatures: {}\r\n}\r\n\r\ninterface IProps { }\r\n\r\ninterface IStorage {\r\n    version: number,\r\n    token: Token,\r\n    user: SpotifyApi.UserObjectPrivate | undefined,\r\n    playlists: { [key: string]: PlaylistObjectSimplifiedWithTrackIds }\r\n}\r\n\r\nexport const App: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    const [token, setToken] = useState<Token | undefined>(undefined);\r\n    const [spotifyData, setSpotifyData] = useState<SpotifyData>(emptySpotifyData);\r\n    const [storedDataDialogOpen, setStoredDataDialogOpen] = useState(false);\r\n    const [playlistsLoading, setPlaylistsLoading] = useState<Set<string>>(new Set());\r\n    const isOnline = useNavigatorOnline();\r\n\r\n    const onTokenChange = (newToken: Token | undefined) => setToken(newToken);\r\n    const onLogOut = () => onTokenChange(undefined);\r\n    const openStoredDataDialog = () => setStoredDataDialogOpen(true);\r\n    const closeStoredDataDialog = () => setStoredDataDialogOpen(false);\r\n\r\n    const refreshUsersPlaylists = (hard: boolean = true) => {\r\n        if (token !== undefined && spotifyData.user !== undefined) {\r\n            getAllSpotifyUsersPlaylists(token, spotifyData.user)\r\n                .then(playlists => {\r\n                    // Remove all requested playlist track ids if we are refreshing hard\r\n                    setSpotifyData(prevState => ({ \r\n                        ...prevState,\r\n                        playlists: { ...arrayToObject<PlaylistObjectSimplifiedWithTrackIds>(playlists.map(p => p.id in prevState.playlists && !hard ? { ...p, track_ids: prevState.playlists[p.id].track_ids } : p), \"id\") }\r\n                    }));\r\n                })\r\n                .catch(err => cogoToast.error(\r\n                    'Could not get your playlists. Make sure you are connected to the internet and that your token is valid.',\r\n                    { position: \"bottom-center\", heading: 'Error When Fetching Playlists', hideAfter: 20, onClick: (hide: any) => hide() }\r\n                ));\r\n        }\r\n    }\r\n\r\n    const refreshPlaylist = (playlist: SpotifyApi.PlaylistObjectSimplified) => {\r\n        if (token !== undefined && !playlistsLoading.has(playlist.id) ) {\r\n            setPlaylistsLoading(prevState => new Set([ ...Array.from(prevState), playlist.id ]));\r\n            getAllTracksInPlaylist(token, playlist)\r\n                .then(tracks => {\r\n                    setSpotifyData(prevState => {\r\n                        const tracks_with_data = tracks.filter(t => Object.values(t).length !== 1) // Filter out tracks that don't have data (can happen with vidoes - will only be {audio_features: undefined})\r\n                        if (tracks.length !== tracks_with_data.length) {\r\n                            cogoToast.warn(\r\n                                `Could not get data for ${tracks.length - tracks_with_data.length} song(s) from \"${playlist.name}\". These are most likely videos in the playlist which are not supported.`,\r\n                                { position: \"bottom-center\", heading: 'Possible Missing Songs', hideAfter: 20, onClick: (hide: any) => hide() }\r\n                            )\r\n                        }\r\n                        const new_tracks = tracks_with_data.filter(t => !(t.id in prevState.tracks));\r\n                        return { \r\n                        ...prevState,\r\n                        tracks: { ...prevState.tracks, ...arrayToObject<TrackWithAudioFeatures>(new_tracks, \"id\") },\r\n                        playlists: { \r\n                            ...prevState.playlists, \r\n                            [playlist.id]: { ...prevState.playlists[playlist.id], track_ids: tracks.map(t => t.id) } \r\n                        }\r\n                    }});\r\n                })\r\n                .catch(err => cogoToast.error(\r\n                    `Could not get songs for the playlist \"${playlist.name}\". Make sure you are connected to the internet and that your token is valid.`,\r\n                    { position: \"bottom-center\", heading: 'Error When Fetching Playlist\\'s Songs', hideAfter: 20, onClick: (hide: any) => hide() }\r\n                ))\r\n                .finally(() => setPlaylistsLoading(prevState => {\r\n                    const updatedPlaylistsLoading = new Set(prevState);\r\n                    updatedPlaylistsLoading.delete(playlist.id);\r\n                    return updatedPlaylistsLoading;\r\n                }));\r\n        }\r\n    }\r\n\r\n    useEffect(() => { // Retrieve part of state from localStorage on startup\r\n        let stored_data: string | null = localStorage.getItem(localStorageKey);\r\n        if (stored_data !== null) {\r\n            try {\r\n                const stored_data_parsed: IStorage = JSON.parse(stored_data);\r\n                stored_data_parsed.token.expiry = new Date(stored_data_parsed.token.expiry);\r\n                if (stored_data_parsed.version === storageVersion && stored_data_parsed.token.expiry > new Date()) {\r\n                    setToken(stored_data_parsed.token);\r\n                    setSpotifyData({ ...emptySpotifyData, user: stored_data_parsed.user, playlists: stored_data_parsed.playlists });\r\n                    refreshUsersPlaylists();\r\n                }\r\n            } catch (error) {\r\n                console.error('Failed to read state from localStorage');\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => { // Store part of state in localStorage\r\n        if (token !== undefined) {\r\n            let data_to_store: IStorage = {\r\n                version: storageVersion,\r\n                token: token,\r\n                user: spotifyData.user,\r\n                playlists: arrayToObject<PlaylistObjectSimplifiedWithTrackIds>(Object.values(spotifyData.playlists).map(p => { return { ...p, track_ids: [] }}), \"id\") // Empty track_id lists in playlist objects\r\n            }\r\n            localStorage.setItem(localStorageKey, JSON.stringify(data_to_store));\r\n        } else {\r\n            localStorage.removeItem(localStorageKey);\r\n        }\r\n    }, [token, spotifyData.user, spotifyData.playlists]);\r\n\r\n    useEffect(() => { // Request the user when the token changes\r\n        if (token === undefined) {\r\n            setSpotifyData(prevState => ({ ...prevState, user: undefined }));\r\n        } else {\r\n            const spotifyApi = new SpotifyWebApi();\r\n            spotifyApi.setAccessToken(token.value);\r\n            spotifyApi.getMe()\r\n                .then(user => {\r\n                    if (spotifyData.user === undefined) { // If there is currently no user, clear the playlists and put the new user in\r\n                        setSpotifyData(prevState => ({ ...prevState, playlists: {}, user: user }));\r\n                    } else if (spotifyData.user.id !== user.id) { // If this is a new user\r\n                        setSpotifyData(prevState => ({ ...prevState, playlists: {}, user: user }));\r\n                    } else { // Same user, new token\r\n                        setSpotifyData(prevState => ({ ...prevState, user: user }));\r\n                    }\r\n                })\r\n                .catch(err => cogoToast.error(\r\n                    'Could not get your profile. Make sure you are connected to the internet and that your token is valid.',\r\n                    { position: \"bottom-center\", heading: 'Error When Fetching Your Profile', hideAfter: 20, onClick: (hide: any) => hide() }\r\n                ));\r\n        }\r\n    }, [token]);\r\n\r\n    useEffect(() => { // Request playlists on user change\r\n        if (spotifyData.user === undefined) {\r\n            setSpotifyData(prevState => ({ ...prevState, playlists: {} }));\r\n        } else {\r\n            refreshUsersPlaylists();\r\n        }\r\n    }, [spotifyData.user]);\r\n\r\n    useEffect(() => { // Request audio features when needed\r\n        const track_ids_with_no_audio_features: string[] = Object.values(spotifyData.tracks)\r\n            .filter(t => t.audio_features === undefined)\r\n            .map(t => t.id);\r\n\r\n        if (token !== undefined && track_ids_with_no_audio_features.length > 0) {\r\n            getAudioFeaturesForTracks(token, track_ids_with_no_audio_features)\r\n                .then((audio_features: (SpotifyApi.AudioFeaturesObject | null)[]) => { // Some tracks will return null audio features\r\n                    // Check if any tracks do not have audio features\r\n                    const audio_features_by_track_id = arrayToObject<SpotifyApi.AudioFeaturesObject>(audio_features.filter((af): af is SpotifyApi.AudioFeaturesObject => af !== null), \"id\");\r\n                    const tracks_with_new_audio_features: TrackWithAudioFeatures[] = track_ids_with_no_audio_features.map(tid => ({\r\n                        ...spotifyData.tracks[tid], \r\n                        audio_features: tid in audio_features_by_track_id ? audio_features_by_track_id[tid] : null\r\n                    }));\r\n\r\n                    // Show a warning if there were tracks with no audio features\r\n                    const null_audio_feature_tracks = tracks_with_new_audio_features.filter(t => t.audio_features === null);\r\n                    if (null_audio_feature_tracks.length > 0) {\r\n                        console.warn(`Some audio features are null: ${null_audio_feature_tracks.map(t => t.id).join(', ')}`);\r\n                    }\r\n\r\n                    setSpotifyData(prevState => ({\r\n                        ...prevState,\r\n                        tracks: { ...prevState.tracks, ...arrayToObject<TrackWithAudioFeatures>(tracks_with_new_audio_features, \"id\") }\r\n                    }));\r\n                })\r\n                .catch(err => cogoToast.error(\r\n                    'Could not get audio features for some songs. Make sure you are connected to the internet and that your token is valid.',\r\n                    { position: \"bottom-center\", heading: 'Error When Fetching Song Audio Features', hideAfter: 20, onClick: (hide: any) => hide() }\r\n                ));\r\n        }\r\n    }, [spotifyData.tracks]);\r\n\r\n    useEffect(() => { // Display a warning when offline\r\n        if (!isOnline) {\r\n            cogoToast.warn(\r\n                'You are now offline. You will not be able to request data from Spotify unless you are connected to the internet.',\r\n                { position: \"bottom-center\", heading: 'Offline', hideAfter: 10, onClick: (hide: any) => hide() }\r\n            );\r\n        }\r\n    }, [isOnline]);\r\n\r\n    const routes = {\r\n        '/': () => <Home />,\r\n        '/spotify-authorization': () => <SpotifyAuthorization onTokenChange={onTokenChange} />,\r\n        '/spotify-authorization/': () => <SpotifyAuthorization onTokenChange={onTokenChange} />,\r\n        '/sort': () => <Sort token={token} user={spotifyData.user} playlists={spotifyData.playlists} tracks={spotifyData.tracks} playlistsLoading={playlistsLoading} refreshPlaylist={refreshPlaylist} refreshUsersPlaylists={refreshUsersPlaylists} />,\r\n        '/about': () => <About />,\r\n    };\r\n    const routeResult = useRoutes(routes);\r\n    useRedirect('/sort/', '/sort');\r\n    useRedirect('/about/', '/about');\r\n\r\n    return <>\r\n        <TokenRefreshWarning token={token} onLogOut={onLogOut} />\r\n        {token !== undefined && spotifyData.user !== undefined && storedDataDialogOpen && \r\n            <StoredDataDialog \r\n                token={token}\r\n                user={spotifyData.user}\r\n                playlists={spotifyData.playlists}\r\n                tracks={spotifyData.tracks}\r\n                onClose={closeStoredDataDialog} \r\n                onLogOut={onLogOut} \r\n            />\r\n        }\r\n        <Navigation user={spotifyData.user} onAuthButtonLoggedInClick={openStoredDataDialog} />\r\n        {routeResult || <NotFound />}\r\n    </>\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/banner.ed08e733.png\";","module.exports = __webpack_public_path__ + \"static/media/spotify-logo-round.d154494c.png\";","module.exports = __webpack_public_path__ + \"static/media/sort-comparison.5fbd2110.png\";"],"sourceRoot":""}